<?php

/**
 * @file
 * Default theme implementation for displaying a single search result.
 *
 * This template renders a single search result and is collected into
 * search-results.tpl.php. This and the parent template are
 * dependent to one another sharing the markup for definition lists.
 *
 * Available variables:
 * - $url: URL of the result.
 * - $title: Title of the result.
 * - $snippet: A small preview of the result. Does not apply to user searches.
 * - $info: String of all the meta information ready for print. Does not apply
 *   to user searches.
 * - $info_split: Contains same data as $info, split into a keyed array.
 * - $module: The machine-readable name of the module (tab) being searched, such
 *   as "node" or "user".
 * - $title_prefix (array): An array containing additional output populated by
 *   modules, intended to be displayed in front of the main title tag that
 *   appears in the template.
 * - $title_suffix (array): An array containing additional output populated by
 *   modules, intended to be displayed after the main title tag that appears in
 *   the template.
 *
 * Default keys within $info_split:
 * - $info_split['type']: Node type (or item type string supplied by module).
 * - $info_split['user']: Author of the node linked to users profile. Depends
 *   on permission.
 * - $info_split['date']: Last update of the node. Short formatted.
 * - $info_split['comment']: Number of comments output as "% comments", %
 *   being the count. Depends on comment.module.
 *
 * Other variables:
 * - $classes_array: Array of HTML class attribute values. It is flattened
 *   into a string within the variable $classes.
 * - $title_attributes_array: Array of HTML attributes for the title. It is
 *   flattened into a string within the variable $title_attributes.
 * - $content_attributes_array: Array of HTML attributes for the content. It is
 *   flattened into a string within the variable $content_attributes.
 *
 * Since $info_split is keyed, a direct print of the item is possible.
 * This array does not apply to user searches so it is recommended to check
 * for its existence before printing. The default keys of 'type', 'user' and
 * 'date' always exist for node searches. Modules may provide other data.
 * @code
 *   <?php if (isset($info_split['comment'])): ?>
 *     <span class="info-comment">
 *       <?php print $info_split['comment']; ?>
 *     </span>
 *   <?php endif; ?>
 * @endcode
 *
 * To check for all available data within $info_split, use the code below.
 * @code
 *   <?php print '<pre>'. check_plain(print_r($info_split, 1)) .'</pre>'; ?>
 * @endcode
 *
 * @see template_preprocess()
 * @see template_preprocess_search_result()
 * @see template_process()
 *
 * @ingroup themeable
 */

?>
<?php

//This is here to replace node->title with node->field_title....BUT gives full access to $node object for display!
$get_node=str_replace("https://www.ptapascit.services.brown.edu/", "", $url);
$get_node=drupal_lookup_path('source',$get_node); 
$type_id=explode('/',$get_node);
$type=$type_id[0];
$id=$type_id[1];

if($type=='node'){
$node=node_load($id);
if(isset($node->field_title)){
$title=$node->field_title['und'][0]['value'];
if($node->type=='collection' || $node->type=='tei_content'){
//get OG group node
$get_og_id=$node->og_group_ref['und'][0]['target_id'];
$node_og=node_load($get_og_id);
$breadcrumb="<span class='byline'>A Collection of the <a class='breadcrumb'  href='node/".$get_og_id."'>".$node_og->field_title['und'][0]['value']."</a> </span>";
}
if($node->type=='tei_content'){
$get_collection_id=$node->field_collection_node_reference['und'][0]['target_id'];
$node_collection=node_load($get_collection_id);
$breadcrumb="<span class='byline'>Part of the Collection <a class='breadcrumb'  href='node/".$get_collection_id."'>".$node_collection->field_title['und'][0]['value']."</a> in the Project <a class='breadcrumb'  href='node/".$get_og_id."'>".$node_og->field_title['und'][0]['value']."</a> </span>";
}
}
}

?>
<li class="<?php print $classes; ?>"<?php print $attributes; ?>>
  <?php print render($title_prefix); ?>
  <h3 class="title"<?php print $title_attributes; ?>>
    <a href="<?php print $url; ?>"><?php print $title; ?></a>
  </h3>
<?php //print render($title_suffix);
echo $breadcrumb;
?>
  <div class="search-snippet-info">
    <?php if ($snippet):
	/*
	//Get all matches of highlighted terms
	$hits = preg_match('#<strong>(.+?)</strong>#is', $snippet, $matches);
	$i=0;
	foreach($matches as $hit){
		$matches[$i] = ' '.strip_tags($hit);
		$i++;
	}
	*/
	//print_r($matches);
	//$snippet = strip_tags($snippet);
	//An array of items that need a break tag for fomatting 
	$add_br=(array('Author (TAPAS):','Project Summary:','Institution:','Collection Name:','Collection Description:','Project Name:','Title (DC Title):','Display Title:','Alternate Titles (DC Alternative):','Author (DC Creator):','DC Contributor:','Location:','DC Coverage-Spatial:','Publication Date of Source (DC Date):','DC Publisher:','Language (DC Language):','DC Rights:','Rights Granted Additional Info:','DC Identifier:','DD Classification (DC Subject):','Getty AAT Genre (DC Subject):','LOC Classification (DC Subject):','User Subject Tags (DC Subject):','Source (DC Source)', 'DC Source (Full Text)', 'Short Description (DC Description):','TEI Full Text:'));
	$has_label=0;
	foreach($add_br as $string){
		//$snippet=str_replace($string,'<br/>'.$string,$snippet);
		if(strpos($snippet,$string)){
			$has_label=1;
		}
	}
	if(!$has_label && $snippet && !strpos($url,'/users/')){
		$snippet='TEI Full Text: '.$snippet;
	}
	/*
	foreach($matches as $hit){
		$snippet=str_replace($hit,'<strong>'.$hit.'</strong>',$snippet);
	}
*/
// User options
$str=$snippet;
$str=str_replace(' ... ', '', $str);
//echo $str;
$MAX_SNIPPET_LENGTH = 50; // Number of characters

// Parse out fields 

$labelRegEx = join('|', array_values ( $add_br ));
$labelRegEx=str_replace('(','\(',$labelRegEx);
$labelRegEx=str_replace(')','\)',$labelRegEx);
//print_r($labelRegEx);
preg_match_all("/(?P<label>$labelRegEx)(?P<value>.*?)(?=$labelRegEx)/smu", $str, $matches);
//print_r($matches);
// Iterate through matched fields

$table =''; // Collect listing of matching fields here (an array would be cleaner)


for ($i = 0; $i < count($matches[label]); ++$i) {

	// Current field label & value

	$label = $matches[label][$i];
	$value = $matches[value][$i];
//echo "hi ".$label;
	// Grab fields that will be displayed & look for <strong> tag in all other fields
/*
	if ($label == "Display Title:") {
		$header = $value;
	} elseif ($label == "Project:") {
		$project = $value;
	} elseif ($label == "Collection:") {
		$collection = $value;
	} else*/if (preg_match ( '/<strong>.*?<\/strong>/' , $value )) {

		// If <strong> tag is in TEI full text, reduce to snippets separated by '...'
		//if ($label == "TEI Full Text:") {
			preg_match_all ( "/(?:\b|^).{0,$MAX_SNIPPET_LENGTH}<strong>.*?<\/strong>.{0,$MAX_SNIPPET_LENGTH}(?:\b|$)/" , $value, $snippets );
			//print_r($value);
			$value = '...' . join("...<br />... ", $snippets[0]) . '...';
			//$value="TEI Full Text: ".$snippet;
		//}

		// Add matching fields to table

		$table .= "<tr><th valign='top'>" . $label . "</th><td>" . $value . "</td></tr>\n";
	}
}
if (!$table){
	print $snippet;
}else{
print "<table border='0'>" . $table . "</table>";
}
	?>
      <p class="search-snippet"<?php //print $content_attributes; ?>><?php //print $snippet; ?></p>
    <?php endif; ?>
    <?php if ($info): ?>
      <p class="search-info"><?php //print $info; ?></p>
    <?php endif; ?>
  </div>
</li>
