<?php

/**
 * @file
 * Default theme implementation for displaying a single search result.
 *
 * This template renders a single search result and is collected into
 * search-results.tpl.php. This and the parent template are
 * dependent to one another sharing the markup for definition lists.
 *
 * Available variables:
 * - $url: URL of the result.
 * - $title: Title of the result.
 * - $snippet: A small preview of the result. Does not apply to user searches.
 * - $info: String of all the meta information ready for print. Does not apply
 *   to user searches.
 * - $info_split: Contains same data as $info, split into a keyed array.
 * - $module: The machine-readable name of the module (tab) being searched, such
 *   as "node" or "user".
 * - $title_prefix (array): An array containing additional output populated by
 *   modules, intended to be displayed in front of the main title tag that
 *   appears in the template.
 * - $title_suffix (array): An array containing additional output populated by
 *   modules, intended to be displayed after the main title tag that appears in
 *   the template.
 *
 * Default keys within $info_split:
 * - $info_split['type']: Node type (or item type string supplied by module).
 * - $info_split['user']: Author of the node linked to users profile. Depends
 *   on permission.
 * - $info_split['date']: Last update of the node. Short formatted.
 * - $info_split['comment']: Number of comments output as "% comments", %
 *   being the count. Depends on comment.module.
 *
 * Other variables:
 * - $classes_array: Array of HTML class attribute values. It is flattened
 *   into a string within the variable $classes.
 * - $title_attributes_array: Array of HTML attributes for the title. It is
 *   flattened into a string within the variable $title_attributes.
 * - $content_attributes_array: Array of HTML attributes for the content. It is
 *   flattened into a string within the variable $content_attributes.
 *
 * Since $info_split is keyed, a direct print of the item is possible.
 * This array does not apply to user searches so it is recommended to check
 * for its existence before printing. The default keys of 'type', 'user' and
 * 'date' always exist for node searches. Modules may provide other data.
 * @code
 *   <?php if (isset($info_split['comment'])): ?>
 *     <span class="info-comment">
 *       <?php print $info_split['comment']; ?>
 *     </span>
 *   <?php endif; ?>
 * @endcode
 *
 * To check for all available data within $info_split, use the code below.
 * @code
 *   <?php print '<pre>'. check_plain(print_r($info_split, 1)) .'</pre>'; ?>
 * @endcode
 *
 * @see template_preprocess()
 * @see template_preprocess_search_result()
 * @see template_process()
 *
 * @ingroup themeable
 */
// User options
$str=$snippet;
$MAX_SNIPPET_LENGTH = 30; // Number of characters

// Map of field labels with display labels

$FIELD_NAMES = array(
	'Author \(TAPAS\):' => 'Author',
	'Project Summary:' => 'Project Summary',
	'Institution:' => 'Institution',
	'Collection:' => 'Collection',
	'Collection Description:' => 'Collection Description',
	'Project:' => 'Project',
	'Title \(DC Title\):' => 'Title',
	'Display Title:' => 'Title for display',
	'Alternate Titles \(DC Alternative\):' => 'Alternate title',
	'Author \(DC Creator\):' => 'Author',
	'DC Contributor:' => 'Contributor',
	'Location:' => 'Located at',
	'DC Coverage-Spatial:' => 'About geographical region',
	'Publication Date of Source \(DC Date\):' => 'Date of publication',
	'DC Publisher:' => 'Published by',
	'Language \(DC Language\):' => 'Language',
	'DC Rights:' => 'Rights',
	'Rights Granted Additional Info:' => 'Rights Granted',
	'DC Identifier:' => 'Identifier',
	'DD Classification \(DC Subject\):' => 'Classified as',
	'Getty AAT Genre \(DC Subject\):' => 'Subject (Getty)',
	'LOC Classification \(DC Subject\):' => 'Subject (Library of Congress)',
	'User Subject Tags \(DC Subject\):' => 'Subject',
	'Source \(DC Source\)' => 'Source',
	'DC Source \(Full Text\)' => 'Source',
	'Short Description \(DC Description\):' => 'Description',
	'TEI Full Text:' => 'Document text'
);

// Parse out fields 

$labelRegEx = join('|', array_keys ( $FIELD_NAMES ));
preg_match_all("/(?P<label>$labelRegEx)(?P<value>.*?)(?=<\/str>|$labelRegEx)/smu", $str, $matches);

// Iterate through matched fields

$table =''; // Collect listing of matching fields here (an array would be cleaner)

$header = '';
$project = '';
$collection = '';

for ($i = 0; $i < count($matches[label]); ++$i) {

	// Current field label & value

	$label = $matches[label][$i];
	$value = $matches[value][$i];

	// Grab fields that will be displayed & look for <strong> tag in all other fields

	if ($label == "Display Title:") {
		$header = $value;
	} elseif ($label == "Project:") {
		$project = $value;
	} elseif ($label == "Collection:") {
		$collection = $value;
	} elseif (preg_match ( '/<strong>.*?<\/strong>/' , $value )) {

		// If <strong> tag is in TEI full text, reduce to snippets separated by '...'

		if ($label == "TEI Full Text:") {
			preg_match_all ( "/(?:\b|^).{0,$MAX_SNIPPET_LENGTH}<strong>.*?<\/strong>.{0,$MAX_SNIPPET_LENGTH}(?:\b|$)/" , $value, $snippets );
			$value = '...' . join("...<br />... ", $snippets[0]) . '...';
		}

		// Add matching fields to table

		$table .= "<tr><th valign='top'>" . $FIELD_NAMES[$label] . "</th><td>" . $value . "</td></tr>\n";
	}
}


print "<h1>" . $header . "</h1>";
print "<table border='0'>" . $table . "</table>";

print $snippet;

?>

