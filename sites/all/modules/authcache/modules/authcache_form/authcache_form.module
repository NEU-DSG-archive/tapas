<?php
/**
 * @file
 * Form token retrieval for Authcache.
 */

/**
 * Implements hook_menu().
 */
function authcache_form_menu() {
  $items['admin/config/system/authcache/forms'] = array(
    'title' => 'Forms',
    'description' => "Configure form settings.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('authcache_form_admin'),
    'access arguments' => array('administer site configuration'),
    'file' => 'authcache_form.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_authcache_p13n_fragment().
 */
function authcache_form_authcache_p13n_fragment() {
  return array(
    'form-token' => array(
      'fragment' => 'AuthcacheFormTokenFragment',
      'cache maxage' => ini_get('session.cookie_lifetime') ?: 0,
    ),
    'form-build-id' => array(
      'fragment' => 'AuthcacheFormBuildIdFragment',
      'cache maxage' => 21600,
    ),
  );
}

/**
 * Implements hook_authcache_p13n_admin_config().
 */
function authcache_form_authcache_p13n_admin_config() {
  $configs = array();

  $config = array(
    'lifespan' => ini_get('session.cookie_lifetime') ?: 0,
  ) + authcache_p13n_config_defaults();
  $configs[] = array(
    'title' => t('Token'),
    'group' => t('Form'),
    'location' => t('Forms for authenticated users'),
    'type' => 'fragment',
    'id' => 'form-token',
    'config' => $config,
    'path' => 'admin/config/system/authcache/forms',
  );

  $config = array(
    'lifespan' => 21600,
  ) + authcache_p13n_config_defaults();
  $configs[] = array(
    'title' => t('Build ID'),
    'group' => t('Form'),
    'location' => t('Ajax enabled forms'),
    'type' => 'fragment',
    'id' => 'form-build-id',
    'config' => $config + authcache_p13n_config_defaults(),
    'path' => 'admin/config/system/authcache/forms',
  );

  return $configs;
}

/**
 * Implements hook_cacheobject_presave().
 */
function authcache_cacheobject_presave($object, $cid, $bin) {
  // Extend the expiry period for prototype forms used in ajax enabled forms.
  if ($bin == 'cache_form' && strpos($cid, 'form_authcache-') === 0) {
    $ttl = variable_get('authcache_form_cache_lifespan', 604800);
    if ($ttl == 'custom') {
      $ttl = variable_get('authcache_form_cache_lifespan_custom');
    }

    $object->expire = REQUEST_TIME + $ttl;
  }
}

/**
 * Implements hook_form_alter().
 */
function authcache_form_form_alter(&$form, &$form_state, $form_id) {
  if (_authcache_form_allow_notoken($form_id)) {
    // Removal of form token is allowed on this form. When removing form tokens
    // we need to do that on both cacheable as well as uncacheable versions of
    // the page. Otherwise form-processing will not work as soon as the form is
    // submitted.
    unset($form['#token']);
    unset($form['form_token']);
    authcache_element_set_cacheable($form);
  }
  elseif (_authcache_form_allow_p13n($form_id) && authcache_page_is_cacheable()) {
    $form['#after_build'][] = '_authcache_form_after_build';
  }
}

/**
 * Form after_build callback for forms on cacheable pages.
 *
 * Setup form such that the per-session form token (used for CSRF protection)
 * can be retrieved separately. Some forms (especially Ajax-enabled ones) 
 * require the form cache. In this case a prototype form build is stored into
 * the form-cache which can be used to create new builds when necessary.
 *
 * @see drupal_build_form()
 */
function _authcache_form_after_build($form, $form_state) {
  // Check whether another module already took the form over.
  if (authcache_page_is_cacheable() && !authcache_element_is_cacheable($form)) {
    // Store prototype-form builds in the form cache if necessary.
    if (!empty($form['form_build_id'])) {
      // Replace hidden form_build_id input with personalization request
      // fragment.
      authcache_p13n_attach($form['form_build_id'], array(
        '#theme' => 'authcache_p13n_fragment',
        '#fragment' => 'form-build-id',
        '#param' => $form['#build_id'],
        '#fallback' => 'cancel',
      ));

      // Prepend 'authcache-' to the build-id. Those builds will serve as
      // prototypes when generating new forms for other users from within
      // AuthcacheFormBuildIdFragment.
      $form['#build_id'] = 'authcache-' . $form['#build_id'];
    }

    if (!empty($form['form_token'])) {
      // Replace hidden form_token input with personalization request fragment.
      $form_token_id = isset($form['#token']) ? $form['#token'] : $form['#form_id'];
      authcache_p13n_attach($form['form_token'], array(
        '#theme' => 'authcache_p13n_fragment',
        '#fragment' => 'form-token',
        '#param' => $form_token_id,
        '#fallback' => 'cancel',
      ));
    }

    authcache_element_set_cacheable($form);
  }

  return $form;
}

/**
 * Test whether defered retrieval of form token / build-id is allowed.
 *
 * @param string $form_id
 *   The form id to test (not used currently)
 * @param object $account
 *   The account to test.
 *
 * @return bool
 *   TRUE if config allows retrieval of the form token, FALSE otherwise.
 */
function _authcache_form_allow_p13n($form_id, $account = NULL) {
  return authcache_role_restrict_access(variable_get('authcache_form_roles'), $account) && module_exists('authcache_p13n');
}

/**
 * Test whether stripping of CSRF token is allowed for the given form.
 *
 * @param string $form_id
 *   The form id to test.
 * @param object $account
 *   The account to test.
 *
 * @return bool
 *   TRUE if config allows removal of the form token, FALSE otherwise.
 */
function _authcache_form_allow_notoken($form_id, $account = NULL) {
  return authcache_role_restrict_members_access(variable_get('authcache_form_notoken_roles'), $account) && _authcache_form_match_form_id($form_id, variable_get('authcache_form_notoken', ''));
}

/**
 * Check if a form_id matches any pattern in a set of patterns.
 *
 * @param string $form_id
 *   The form id to match.
 * @param string $patterns
 *   String containing a set of patterns separated by \n, \r or \r\n.
 *
 * @return bool
 *   TRUE if the form id matches a pattern, FALSE otherwise.
 *
 * @see drupal_match_path()
 */
function _authcache_form_match_form_id($form_id, $patterns) {
  $regexps = &drupal_static(__FUNCTION__);

  if (!isset($regexps[$patterns])) {
    // Convert path settings to a regular expression.
    // Therefore replace newlines with a logical or and /* with asterisks.
    $to_replace = array(
      '/(\r\n?|\n)/',
      '/\\\\\*/',
    );
    $replacements = array(
      '|',
      '.*',
    );
    $patterns_quoted = preg_quote($patterns, '/');
    $regexps[$patterns] = '/^(' . preg_replace($to_replace, $replacements, $patterns_quoted) . ')$/';
  }
  return (bool) preg_match($regexps[$patterns], $form_id);
}
