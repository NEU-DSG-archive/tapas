<?php
/**
 * @file
 * Debug widget for Authcache.
 */

/**
 * Implements hook_menu().
 */
function authcache_debug_menu() {
  $items['admin/config/system/authcache/debug'] = array(
    'title' => 'Debug',
    'description' => "Configure debug settings.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('authcache_debug_admin'),
    'access arguments' => array('administer site configuration'),
    'file' => 'authcache_debug.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );

  $items['authcache-debug/ajax/%authcache_debug_info'] = array(
    'page callback' => 'authcache_debug_info_ajax_get',
    'page arguments' => array(2),
    'access callback' => 'authcache_debug_access',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_user_login().
 */
function authcache_debug_user_login(&$edit, $account) {
  $cookies['cache_render']['present'] = FALSE;
  $cookies['aucdbg']['present'] = authcache_debug_access();
  if ($cookies['aucdbg']['present']) {
    $cookies['aucdbg']['value'] = isset($_COOKIES['aucdbg']) ? $_COOKIES['aucdbg'] : hexdec(mt_rand(0,0xFFFF));
  }
  authcache_add_cookie($cookies);
}

/**
 * Implements hook_user_logout().
 */
function authcache_debug_user_logout($account) {
  $cookies['cache_render']['present'] = FALSE;
  $cookies['aucdbg']['present'] = variable_get('authcache_debug_all', FALSE);
  if ($cookies['aucdbg']['present']) {
    $cookies['aucdbg']['value'] = isset($_COOKIES['aucdbg']) ? $_COOKIES['aucdbg'] : hexdec(mt_rand(0,0xFFFF));
  }
  authcache_add_cookie($cookies);
}

/**
 * Implements hook_page_build().
 *
 * Attach authcache JavaScript if page is going to be cached.
 */
function authcache_debug_page_build(&$page) {
  // Add JS for debug mode?
  drupal_add_js(drupal_get_path('module', 'authcache_debug') . '/authcache_debug.js');
  drupal_add_css(drupal_get_path('module', 'authcache_debug') . '/authcache_debug.css');

  $callback = url('authcache-debug/ajax/' . _authcache_debug_cid());
  drupal_add_js(array('authcacheDebug' => $callback), 'setting');

  if (authcache_page_is_cacheable()) {
    // Status messages prevent pages from being cached.
    if (variable_get('authcache_debug_page', FALSE)) {
      drupal_set_message(t('Caching disabled by') . ' ' . l(t('Authcache Config.'), 'admin/config/system/authcache/debug'));
    }
  }
}

/**
 * Implements hook_authcache_cache_data_alter().
 */
function authcache_debug_init() {
  drupal_register_shutdown_function('_authcache_debug_shutdown');
}

/**
 * Implements hook_flush_caches().
 */
function authcache_debug_flush_caches() {
  return array('cache_authcache_debug');
}

/**
 * Return generated cid for authcache debug information.
 */
function _authcache_debug_cid() {
  $cid = &drupal_static(__FUNCTION__);

  if (!isset($cid)) {
    $cid = 'req-' . drupal_hash_base64(uniqid(mt_rand(), TRUE) . mt_rand());
  }

  return $cid;
}

/**
 * Shutdown function for saving debug info.
 */
function _authcache_debug_shutdown() {
  $debuginfo = module_invoke_all('authcache_debug_info');
  drupal_alter('authcache_debug_info', $debuginfo);

  $messages = authcache_debug_log();
  if (!empty($messages)) {
    $debuginfo['messages'] = $messages;
  }

  $cid = _authcache_debug_cid();

  $lifetime = variable_get('authcache_debug_cache_lifetime', 0);
  $expire = $lifetime > 0 ? REQUEST_TIME + $lifetime : CACHE_TEMPORARY;

  cache_set($cid, $debuginfo, 'cache_authcache_debug', $expire);
}

/**
 * Implements hook_authcache_debug_info().
 */
function authcache_debug_authcache_debug_info() {
  global $user, $_authcache_queries;

  $info = array(
    'cacheTime' => REQUEST_TIME,
    'cacheStatus' => _authcache_debug_status(),
    'cacheReqId' => empty($_COOKIE['aucdbg']) ? '' : $_COOKIE['aucdbg'],
    'pageRender' => timer_read('page'),
    'Debug Users' => variable_get('authcache_debug_users', array()),
    'Cache User' => $user->uid,
    'Cache Backends' => implode(', ', module_implements('authcache_cache_save')),
    'Authcache Key' => authcache_key(),
  );

  if (user_is_logged_in()) {
    $info['Key props'] = authcache_key_properties();
  }

  // Database benchmarks.
  // TODO:D7 make this work.
  if (isset($_authcache_queries) && variable_get('dev_query', 0)) {
    $time_query = 0;
    foreach ($_authcache_queries as $q) {
      $time_query += $q[1];
    }
    // Convert seconds to milliseconds.
    $time_query = round($time_query * 1000, 2);
    $percent_query = round(($time_query / $info['pageRender']) * 100);

    $info['page_queries'] = count($_authcache_queries) . " queries @ {$time_query} ms ({$percent_query}%)";
  }
  else {
    unset($info['page_queries']);
  }

  return $info;
}

/**
 * Log a message to the debug widget and / or watchdog.
 */
function authcache_debug_log($label = NULL, $message = NULL) {
  $messages = &drupal_static(__FUNCTION__);

  if (!isset($messages)) {
    $messages = array();
  }

  if ($label && $message) {
    $messages[] = array(
      'label' => $label,
      'message' => $message,
    );

    if (variable_get('authcache_debug_watchdog')) {
      watchdog('Authcache', '@label: @message', array('@label' => $label, '@message' => $message));
    }
  }

  return $messages;
}

/**
 * Set and get the caching status of the current request.
 */
function _authcache_debug_status($status = NULL) {
  $firstStatus = &drupal_static(__FUNCTION__);

  if (!isset($firstStatus) && isset($status)) {
    $firstStatus = $status;
  }

  return $firstStatus;
}

/**
 * Implements hook_authcache_excluded().
 */
function authcache_debug_authcache_excluded($reason) {
  _authcache_debug_status('Page EXCLUDED');
  authcache_debug_log(t('Excluded'), $reason);
}

/**
 * Implements hook_authcache_canceled().
 */
function authcache_debug_authcache_canceled($reason) {
  _authcache_debug_status('Caching CANCELED');
  authcache_debug_log(t('Canceled'), $reason);
}

/**
 * Implements hook_authcache_precluded().
 */
function authcache_debug_authcache_precluded($reason) {
  global $user;

  if (!empty($user->uid) || !empty($_SESSION)) {
    $_SESSION['aucdbg_precluded'][] = array(
      'label' => t('Precluded'),
      'message' => $reason,
    );
  }

  authcache_debug_log(t('Precluded'), $reason);
}

/**
 * Returns true if the currently logged in user has access to debug functions.
 */
function authcache_debug_access($account = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }

  if (variable_get('authcache_debug_all', FALSE)) {
    return TRUE;
  }
  elseif (!$account->uid) {
    return FALSE;
  }
  else {
    return in_array($account->name, variable_get('authcache_debug_users', array()));
  }
}

/**
 * Load authcache info for the specified cache id.
 */
function authcache_debug_info_load($cid) {
  $cache = cache_get($cid, 'cache_authcache_debug');
  return $cache ? $cache->data : FALSE;
}

/**
 * Deliver cache info to the client via Ajax/Drupal.settings.
 */
function authcache_debug_info_ajax_get($data) {
  if (!empty($_SESSION['aucdbg_precluded'])) {
    foreach ($_SESSION['aucdbg_precluded'] as $message) {
      $data['messages'][] = $message;
    }
    unset($_SESSION['aucdbg_precluded']);

    if (empty($_SESSION)) {
      unset($_SESSION);
    }

    if (empty($data['cacheStatus'])) {
      $data['cacheStatus'] = 'Request PRECLUDED';
    }
  }
  if (empty($data['cacheStatus'])) {
    $reqId = empty($_COOKIE['aucdbg']) ? '' : $_COOKIE['aucdbg'];
    $cacheReqId = $data['cacheReqId'];
    $data['cacheStatus'] = ($reqId == $cacheReqId) ? 'MISS' : 'HIT';
  }

  drupal_add_http_header('Vary', 'Cookie');
  drupal_add_http_header('Cache-Control', 'no-cache, must-revalidate, post-check=0, pre-check=0');
  drupal_json_output($data);
  drupal_exit();
}
