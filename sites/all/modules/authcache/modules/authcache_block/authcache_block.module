<?php
/**
 * @file
 * Authcache support for block module.
 */

/**
 * Implements hook_authcache_p13n_fragment().
 */
function authcache_block_authcache_p13n_fragment() {
  $result = db_select('block', 'b')->fields('b')->condition('b.status', 1)->execute();
  $blocks = $result->fetchAllAssoc('bid');

  $fragments = array();
  foreach ($blocks as $block) {
    $block_id = "{$block->module}-{$block->delta}";
    $config = variable_get('authcache_block-' . $block_id);

    if (!empty($config['status'])) {
      $fragment_id = 'block/' . $block_id;
      $fragments[$fragment_id] = array(
        'fragment' => 'AuthcacheBlockFragment',
        'bootstrap phase' => DRUPAL_BOOTSTRAP_FULL,
        'cache maxage' => authcache_p13n_config_cache_maxage($config),
        'cache granularity' => authcache_p13n_config_cache_granularity($config),
      );
    }
  }

  return $fragments;
}

/**
 * Implements hook_authcache_p13n_admin_config().
 */
function authcache_block_authcache_p13n_admin_config() {
  $default_theme = variable_get('theme_default');

  // Get all blocks for the default theme.
  $blocks = _block_rehash($default_theme);
  $regions = system_region_list($default_theme);

  $configs = array();
  $configs[] = array(
    'group' => t('Blocks'),
    'message' =>  t('To add a block to the list of personalized blocks, visit the <a href="!blocks_url">Block administration page</a> and click "configure" next to the block in question.', array('!blocks_url' => url('admin/structure/block'))),
  );

  foreach ($blocks as $block) {
    $block_id = "{$block['module']}-{$block['delta']}";
    $config = variable_get('authcache_block-' . $block_id);

    if (!empty($config['status'])) {
      $fragment_id = 'block/' . $block_id;
      $configs[] = array(
        'title' => $block['info'],
        'group' => t('Blocks'),
        'type' => 'fragment',
        'id' => $fragment_id,
        'location' => $regions[$block['region']],
        'config' => $config + authcache_p13n_config_defaults(),
        'path' => 'admin/structure/block/manage/' . $block['module'] . '/' . $block['delta'] . '/configure',
      );
    }
  }

  return $configs;
}

/**
 * Implements hook_form_alter().
 */
function authcache_block_form_block_admin_configure_alter(&$form, &$form_state, $form_id) {
  $block_id = "{$form['module']['#value']}-{$form['delta']['#value']}";

  $form['authcache'] = array(
    '#type' => 'fieldset',
    '#title' => t('Authcache personalization'),
  );

  $form['authcache']['authcache_settings'] = array(
    '#type' => 'authcache_p13n_config',
    '#default_value' => variable_get('authcache_block-' . $block_id, array()),
  );

  $form['#submit'][] = 'authcache_block_config_submit';
}

/**
 * Block submit handler.
 */
function authcache_block_config_submit($form, &$form_state) {
  $module = $form_state['values']['module'];
  $delta  = $form_state['values']['delta'];
  $block_id = "$module-$delta";

  variable_set('authcache_block-' . $block_id,
    $form_state['values']['authcache_settings']);

  // Clear external caches.
  authcache_p13n_session_invalidate();

  // Rebuild registry of personalization requests.
  authcache_p13n_request_router_rebuild();
}

/**
 * Implements hook_page_alter().
 *
 * Loop through every block in every region and add a post_render callback when
 * the block should be loaded independant of cached pages.
 */
function authcache_block_page_alter(&$page) {
  if (authcache_page_is_cacheable()) {
    foreach (element_children($page) as $region) {
      foreach (element_children($page[$region]) as $key) {
        if (!empty($page[$region][$key]['#block'])) {
          $block = $page[$region][$key]['#block'];

          $block_id = "{$block->module}-{$block->delta}";
          $config = variable_get('authcache_block-' . $block_id);
          if (!empty($config['status'])) {
            $config += authcache_p13n_config_defaults();
            $fragment_id = 'block/' . $block_id;

            authcache_p13n_attach($page[$region][$key], array(
              '#theme' => 'authcache_p13n_fragment',
              '#fragment' => $fragment_id,
              '#param' => $block_id,
              '#clients' => $config['clients'],
              '#fallback' => $config['fallback'],
            ));
          }
        }
      }
    }
  }
}
