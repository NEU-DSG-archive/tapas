<?php
/**
 * @file
 * Authenticated User Page Caching (and anonymous users, too!)
 *
 * @see authcache.admin.inc for admin page functionality
 */

// Default caching rules (Never cache these pages).
define('AUTHCACHE_NOCACHE_DEFAULT', '
user*
node/add/*
node/*/edit
node/*/track
tracker*
comment/edit*
civicrm*
cart*
system/files/*
system/temporary*
file/ajax/*
');

// Default non-HTML cachable content-types.
define('AUTHCACHE_MIMETYPE_DEFAULT', '
text/html
text/javascript
text/plain
application/xml
application/atom+xml
');

/**
 * Implements hook_menu().
 */
function authcache_menu() {

  $items['admin/config/system/authcache'] = array(
    'title' => 'Authcache',
    'description' => 'Configure authenticated user page caching.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('authcache_admin_config'),
    'access arguments' => array('administer site configuration'),
    'file' => 'authcache.admin.inc',
    'weight' => 10,
  );

  $items['admin/config/system/authcache/config'] = array(
    'title' => 'Configuration',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/system/authcache/pagecaching'] = array(
    'title' => 'Page caching settings',
    'description' => "Configure page cache settings.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('authcache_admin_pagecaching'),
    'access arguments' => array('administer site configuration'),
    'file' => 'authcache.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );

  return $items;
}

/**
 * Implements hook_module_implements_alter().
 *
 * Make sure that hook_init of this module is called before all other modules
 * and vice versa for hook_exit.
 */
function authcache_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'init') {
    $me = $implementations['authcache'];
    unset($implementations['authcache']);
    $implementations = array_merge(array('authcache' => $me), $implementations);
  }

  if ($hook == 'exit') {
    $me = $implementations['authcache'];
    unset($implementations['authcache']);
    $implementations['authcache'] = $me;
  }
}

/**
 * Implements hook_init().
 */
function authcache_init() {
  global $conf, $user;

  $reasons = module_invoke_all('authcache_request_exclude');
  if (!empty($reasons)) {
    _authcache_exclude(reset($reasons));
  }

  $reasons = module_invoke_all('authcache_account_exclude', $user);
  if (!empty($reasons)) {
    _authcache_exclude(reset($reasons));
  }

  if (!authcache_excluded()) {
    // Don't allow format_date() to use the user's local timezone.
    $conf['configurable_timezones'] = FALSE;
  }

  // Attach required JavaScript.
  drupal_add_library('system', 'jquery.cookie');
  drupal_add_js(drupal_get_path('module', 'authcache') . '/authcache.js');

  // Inject authcache cookie settings.
  drupal_add_js(array(
    'authcache' => array(
      'q' => $_GET['q'],
      'cp' => array(
        'path' => ini_get('session.cookie_path'),
        'domain' => ini_get('session.cookie_domain'),
        'secure' => ini_get('session.cookie_secure') == '1',
      ),
      'cl' => authcache_key_lifetime() / 86400,
    ),
  ), 'setting');

  // Remember original session id.
  _authcache_original_session_id(TRUE);

  if (!authcache_excluded()) {
    // Remember original output buffering level.
    _authcache_original_ob_level(TRUE);
  }
}

/**
 * Implements hook_exit().
 *
 * Called on drupal_goto() redirect.
 * Make sure status messages show up, if applicable.
 */
function authcache_exit($destination = NULL) {
  global $user;

  // Do not continue if not fully bootstrapped.
  if (drupal_get_bootstrap_phase() < DRUPAL_BOOTSTRAP_FULL) {
    return;
  }

  // Cancel caching when hook_exit was called from drupal_goto.
  if ($destination !== NULL) {
    authcache_cancel(t('Redirecting to @destination', array('@destination' => $destination)));
  }

  // Disable authcache on next page request e.g. if there are messages pending
  // which did not manage it onto the current page.
  $reasons = module_invoke_all('authcache_preclude');
  if (!empty($reasons)) {
    _authcache_preclude(reset($reasons));
  }

  // Set/unset authcache key for this user.
  $current_session = session_id();
  $previous_session = _authcache_original_session_id();
  if ((!empty($user->uid) || !empty($_SESSION)) && authcache_account_allows_caching()) {
    module_invoke_all('authcache_key_ensure_present', authcache_key(), authcache_key_lifetime(), $current_session, $previous_session);
  }
  else {
    module_invoke_all('authcache_key_ensure_absent', $current_session, $previous_session);
  }

  // Fix cookies if necessary.
  if (!drupal_is_cli() && !headers_sent()) {
    authcache_fix_cookies();
  }

  // Forcibly disable drupal built-in page caching for anonymous users.
  // Prevent drupal_page_set_cache() called from drupal_page_footer() to
  // store the page.
  drupal_page_is_cacheable(FALSE);

  // If this page was excluded in hook_init, we're done here.
  if (authcache_excluded()) {
    return;
  }

  // Give other modules a last chance to cancel page saving.
  $reasons = module_invoke_all('authcache_cancel');
  if (!empty($reasons)) {
    authcache_cancel(reset($reasons));
  }

  // Invoke cache backends and serve page.
  if (authcache_page_is_cacheable()) {
    $cache = authcache_cache_save();
    drupal_serve_page_from_cache($cache);
  }
}

/**
 * Implements hook_flush_caches().
 */
function authcache_flush_caches() {
  return array('cache_authcache_key');
}

/**
 * @defgroup authcache_markup Remove personalization
 * @{
 * Detect personalized content and remove it or cancel caching.
 */

/**
 * Implements hook_form_alter().
 */
function authcache_form_alter(&$form, &$form_state, $form_id) {
  if (authcache_page_is_cacheable()) {
    // Ensure that the default form_after build callback is called first.
    if (empty($form['#after_build'])) {
      $form['#after_build'] = array('_authcache_default_form_after_build');
    }
    else {
      array_unshift($form['#after_build'], '_authcache_default_form_after_build');
    }

    // Add post-render callback ensuring that caching is canceled when a form
    // was not handled by any module.
    authcache_element_suspect($form,
      t('Form with CSRF protection on page. Enable authcache_form or implement custom code capable of handling CSRF protected forms.'));
  }

  // Alter all forms.
  switch ($form_id) {
    case 'user_profile_form':
      // Don't allow user local timezone.
      if (authcache_account_allows_caching()) {
        unset($form['timezone']);
      }
      break;
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function authcache_form_system_performance_settings_alter(&$form, &$form_state) {
  $roles = authcache_get_roles();

  if (count($roles)) {
    $message = '<p>' . t('Drupal core page caching for anonymous users does not work properly when Authcache is enabled. Please either deactivate Drupal core page caching or disable Authcache.') . '</p>';
    if (!isset($roles[DRUPAL_ANONYMOUS_RID])) {
      $message .= '<p>' . t('You may enable the page cache for anonymous users by <a href="!link">configuring</a> Authcache for anonymous users', array('!link' => url('admin/config/system/authcache'))) . '</p>';
    }
    if (variable_get('page_cache_without_database')) {
      $message .= '<p>' . t('Furthermore it seems that !setting is enabled. Please remove that line from !file, otherwise Authcache will not work properly.', array('!setting' => '<code>$conf[\'page_cache_without_database\']</code>', '!file' => '<code>' . conf_path() . '/settings.php</code>')) . '</p>';
    }

    $form['caching']['authcache-warning'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('messages', 'warning')),
      'message' => array(
        '#markup' => $message,
      ),
      '#weight' => -3,
    );

    // If $conf['page_cache_without_database'] is set in settings.php, the
    // warning will be shown regardless of the value of $conf['cache'].
    // Otherwise states are used to show/hide the warning if appropriate.
    if (!variable_get('page_cache_without_database')) {
      $form['caching']['authcache-warning']['#states'] = array(
        'visible' => array(':input[name=cache]' => array('checked' => TRUE)),
      );
    }
  }
}

/**
 * Form API default after-build callback for forms on cacheable pages.
 */
function _authcache_default_form_after_build($form, $form_state) {
  global $user;

  if (authcache_page_is_cacheable()) {
    // Disable form cache and remove build_id if caching is not explicitely
    // requested.
    if (empty($form_state['rebuild']) && empty($form_state['cache'])) {
      $form_state['no_cache'] = TRUE;
      unset($form['form_build_id']);
      unset($form['#build_id']);
    }

    // Enable caching without further processing when no CSRF-token is present
    // on the form.
    if (empty($form['form_token']) && (!$user->uid || empty($form['form_build_id']))) {
      authcache_element_set_cacheable($form);
    }
  }

  return $form;
}

/**
 * Implements hook_preprocess().
 *
 * Inject authcache variables into every template.
 */
function authcache_preprocess(&$variables, $hook) {
  // Define variables for templates files.
  $variables['authcache_is_cacheable'] = authcache_page_is_cacheable();
}

/**
 * Implements hook_preprocess_page().
 *
 * Add post-render callback to tabs and action link elements. Caching will be
 * canceled during post-render when no other modules mark the elements as being
 * cacheable.
 */
function authcache_preprocess_page(&$variables) {
  global $user;

  if (authcache_page_is_cacheable()) {
    authcache_element_suspect($variables['tabs'],
      t('Tabs on page. Enable authcache_menu or implement custom code capable of detecting when caching tabs is acceptable.'));
    authcache_element_suspect($variables['action_links'],
      t('Action links on page. Enable authcache_menu or implement custom code capable of detecting when caching local actions is acceptable.'));

    if (!$user->uid) {
      authcache_element_set_cacheable($variables['tabs']);
      authcache_element_set_cacheable($variables['action_links']);
    }
  }
}

/**
 * Implements hook_process_page().
 *
 * Prevent caching pages with status messages on them. Note that due to the
 * fact the messages are only added in template_process_page, we also need to
 * use the process-hook.
 */
function authcache_process_page(&$variables) {
  if (!empty($variables['messages']) && authcache_page_is_cacheable()) {
    authcache_cancel(t('Status message on page'));
  }
}

/**
 * Specify that the given element cannot be cached without further processing.
 */
function authcache_element_suspect(&$element, $message = NULL) {
  $element['#post_render'][] = 'authcache_ensure_element_cacheable';
  if ($message) {
    $element['#authcache_cancel_message'] = $message;
  }
}

/**
 * Mark a render-element as cacheable.
 */
function authcache_element_set_cacheable(&$element, $cacheable = TRUE) {
  $element['#authcache_is_cacheable'] = $cacheable;
}

/**
 * Return TRUE when the given render element is cacheable.
 */
function authcache_element_is_cacheable($element) {
  return !empty($element['#authcache_is_cacheable']);
}

/**
 * Post-render callback for render elements.
 *
 * Ensure that an element was marked as cacheable by one of the supporting
 * modules.
 */
function authcache_ensure_element_cacheable($markup, $element) {
  if (!empty($markup) && !authcache_element_is_cacheable($element)) {
    $message = !empty($element['#authcache_cancel_message']) ?
      $element['#authcache_cancel_message'] :
      t('Non cacheable render element on page');
    authcache_cancel($message);
  }

  return $markup;
}

/**
 * @} End of "defgroup authcache_markup"
 */

/**
 * @defgroup authcache_policy Caching policy
 * @{
 * Collect and apply policy rules.
 */

/**
 * Private function called from authcache_init.
 *
 * Turn off authcache, do not alter any aspect of this page.
 */
function _authcache_exclude($reason = NULL) {
  $excluded = &drupal_static(__FUNCTION__, FALSE);

  if (!$excluded && !empty($reason)) {
    $excluded = TRUE;
    module_invoke_all('authcache_excluded', $reason);
  }

  return $excluded;
}

/**
 * Return true if this page is excluded from page caching.
 */
function authcache_excluded() {
  return _authcache_exclude();
}

/**
 * Prevent this page of beeing stored in the cache after it is built up.
 */
function authcache_cancel($reason = NULL) {
  $canceled = &drupal_static(__FUNCTION__, FALSE);

  if (!$canceled && !empty($reason)) {
    $canceled = TRUE;
    module_invoke_all('authcache_canceled', $reason);
  }

  return $canceled;
}

/**
 * Return true if the caching was canceled during page-build.
 */
function authcache_canceled() {
  return authcache_cancel();
}

/**
 * Prevent next page request from beeing served from cache.
 *
 * Private function called from authcache_exit. Authcache should not return a
 * cached result on next page request from the same client.
 */
function _authcache_preclude($reason = NULL) {
  $precluded = &drupal_static(__FUNCTION__, FALSE);

  if (!$precluded && !empty($reason)) {
    $precluded = TRUE;
    module_invoke_all('authcache_precluded', $reason);
  }

  return $precluded;
}

/**
 * Whether next page request will not be served from cache.
 *
 * Return true if the next page request for this client should not be served
 * from the cache.
 */
function authcache_precluded() {
  return _authcache_preclude();
}

/**
 * Return true if this page possibly will be cached later.
 */
function authcache_page_is_cacheable() {
  return !(authcache_excluded() || authcache_canceled());
}

/**
 * Return true if the given account is cacheable.
 */
function authcache_account_allows_caching($account = NULL) {
  global $user;
  $cacheable = &drupal_static(__FUNCTION__);

  if (!isset($account)) {
    $account = $user;
  }

  if (!isset($cacheable[$account->uid])) {
    $reasons = module_invoke_all('authcache_account_exclude', $account);
    $cacheable[$account->uid] = empty($reasons);
  }

  return $cacheable[$account->uid];
}

/**
 * @} End of "defgroup authcache_policy"
 */

/**
 * @defgroup authcache_key Key computation and management
 * @{
 */

/**
 * Return key-properties.
 *
 * Return characterizing key-value pairs of a browsers capabilities and the
 * HTTP request.
 */
function authcache_key_properties() {
  $properties = &drupal_static(__FUNCTION__);

  if (!isset($properties)) {
    $properties = module_invoke_all('authcache_key_properties');
    drupal_alter('authcache_key_properties', $properties);
  }

  return $properties;
}

/**
 * Calculate key for logged in user from key-properties record.
 *
 * @param array $properties
 *   Structure with key-value pairs as returned by authcache_key_properties()
 * @param bool $superuser
 *   Whether the key is calculated for the superuser. If set to TRUE the
 *   properties data is hashed twice in order to make the key unique.
 */
function authcache_user_key($properties, $superuser = FALSE) {
  $data = serialize($properties);
  $hmac = hash_hmac('sha1', $data, drupal_get_private_key(), FALSE);

  // Make sure superuser has its own key not shared with anyone else (though
  // it would be better if superuser would'nt be allowed to use the cache in
  // the first place).
  if ($superuser) {
    $hmac = hash_hmac('sha1', $hmac . $data, drupal_get_private_key(), FALSE);
  }

  $abbrev = variable_get('authcache_key_abbrev', 7);
  return $abbrev ? substr($hmac, 0, $abbrev) : $hmac;
}

/**
 * Generate and return the authcache key for the given account.
 *
 * @see hook_authcache_key_properties()
 * @see hook_authcache_key_properties_alter()
 */
function authcache_key() {
  global $base_root, $user;

  if ($user->uid) {
    // Calculate the key for logged in users from key-properties.
    $key = authcache_user_key(authcache_key_properties(), $user->uid == 1);
  }
  else {
    // Generate base-key for anonymous users.
    $generator = variable_get('authcache_key_generator');
    if (is_callable($generator)) {
      $key = call_user_func($generator);
    }
    else {
      $key = $base_root;
    }
  }

  return $key;
}

/**
 * Return the lifetime of authcache keys in seconds.
 *
 * Defaults to the session.cookie_lifetime INI value. When this function
 * returns zero, client code needs to choose an appropriate method such that
 * the authcache key is stored temporary. For example only as long as a browser
 * is open, or by specifying CACHE_TEMPORARY when the key is stored in a cache
 * bin.
 */
function authcache_key_lifetime() {
  $lifetime = (int) variable_get('authcache_key_lifetime', ini_get('session.cookie_lifetime'));
  return $lifetime > 0 ? $lifetime : 0;
}

/**
 * @} End of "defgroup authcache_key"
 */

/**
 * @defgroup authcache_cookie Cookie management
 * @{
 */

/**
 * Add and remove cookies to the browser session as required.
 *
 * @see hook_authcache_cookie()
 * @see hook_authcache_cookie_alter()
 */
function authcache_fix_cookies($account = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }

  $cookies = module_invoke_all('authcache_cookie', $account) + authcache_add_cookie();
  drupal_alter('authcache_cookie', $cookies, $account);

  $default_params = array(
    'present' => FALSE,
    'value' => NULL,
    'lifetime' => authcache_key_lifetime(),
    'path' => ini_get('session.cookie_path'),
    'domain' => ini_get('session.cookie_domain'),
    'secure' => ini_get('session.cookie_secure') == '1',
    'httponly' => FALSE,
  );

  foreach ($cookies as $name => $params) {
    $params += $default_params;

    if ($params['present']) {
      // Fix cookie if it is not present in the users browser or the value does
      // not match our expectations.
      if (!isset($_COOKIE[$name]) || $_COOKIE[$name] != $params['value']) {
        $expires = $params['lifetime'] ? REQUEST_TIME + $params['lifetime'] : 0;
        setcookie($name, $params['value'], $expires, $params['path'], $params['domain'], $params['secure'], $params['httponly']);
      }
    }
    elseif (!$params['present'] && isset($_COOKIE[$name])) {
      // Remove spare cookie.
      setcookie($name, "", REQUEST_TIME - 86400, $params['path'], $params['domain'], $params['secure'], $params['httponly']);
    }
  }
}

/**
 * Add given cookie records to the current page request.
 */
function authcache_add_cookie($new_cookies = array()) {
  $cookies = &drupal_static(__FUNCTION__, array());
  $cookies = $new_cookies + $cookies;
  return $cookies;
}

/**
 * @} End of "defgroup authcache_cookie"
 */

/**
 * @defgroup authcache_backend Cache backend
 * @{
 */

/**
 * Collect document and headers and pass them to cache backends.
 *
 * @return object
 *   A fake-cache object suitable for passing to drupal_serve_page_from_cache.
 *
 * @see drupal_page_set_cache()
 */
function authcache_cache_save() {
  // Restore preferred header names based on the lower-case names returned
  // by drupal_get_http_header().
  $headers = array();
  $header_names = _drupal_set_preferred_header_name();
  foreach (drupal_get_http_header() as $name_lower => $value) {
    $headers[$header_names[$name_lower]] = $value;
  }

  // Retrieve and compress the document body.
  $body = ob_get_contents();
  if (variable_get('page_compression', TRUE) && extension_loaded('zlib')) {
    $body = gzencode($body, 9, FORCE_GZIP);
  }

  // Invoke cache backend.
  $created = REQUEST_TIME;
  module_invoke_all('authcache_cache_save', $body, $headers, $created);

  // Remove buffer content.
  ob_clean();

  // Construct dummy cache object which is later served using
  // drupal_serve_page_from_cache.
  $cache = (object) array(
    'data' => array(
      'body' => $body,
      'headers' => $headers,
    ),
    'created' => $created,
  );

  return $cache;
}

/**
 * @} End of "defgroup authcache_backend"
 */

/**
 * @defgroup authcache_helper Helper functions, mostly private
 * @{
 */

/**
 * Diff user roles.
 *
 * Returns an array containing all the roles from account_roles that are not
 * present in allowed_roles.
 */
function authcache_diff_roles($account_roles, $allowed_roles) {
  // Remove "authenticated user"-role from the account roles except when it is
  // the only role on the account.
  if (array_keys($account_roles) != array(DRUPAL_AUTHENTICATED_RID)) {
    unset($account_roles[DRUPAL_AUTHENTICATED_RID]);
  }

  return array_diff_key($account_roles, $allowed_roles);
}

/**
 * Helper function, get authcache user roles.
 *
 * @param bool $all_roles
 *   TRUE when all user roles should be returned, FALSE for authcache-enabled
 *   only.
 *
 * @return array
 *   Associative array of role names keyed by their role-id.
 */
function authcache_get_roles($all_roles = FALSE) {
  $roles = user_roles();

  // Clarify that the authenticated user-rid will only be considired if the
  // user does not have any other role.
  $roles[DRUPAL_AUTHENTICATED_RID] = t('@authenticated_user (without additional roles)',
     array('@authenticated_user' => $roles[DRUPAL_AUTHENTICATED_RID]));

  if (!$all_roles) {
    $authcache_roles = variable_get('authcache_roles', array());
    $roles = array_intersect_key($roles, $authcache_roles);
  }

  return $roles;
}

/**
 * Return current MIME content type.
 *
 * Determines the MIME content type of the current page response based on
 * the currently set Content-Type HTTP header.
 *
 * This should normally return the string 'text/html' unless another module
 * has overridden the content type.
 */
function _authcache_get_content_type($default = NULL) {
  $params = explode(';', drupal_get_http_header('content-type'));
  $params = array_map('trim', $params);
  $mime = array_shift($params);

  return array(
    'mimetype' => $mime,
    'params' => $params,
  );
}

/**
 * Return HTTP status code.
 *
 * Determines the HTTP response code that the current page request will be
 * returning by examining the HTTP headers that have been output so far.
 */
function _authcache_get_http_status($status = 200) {
  $value = drupal_get_http_header('status');
  return isset($value) ? (int) $value : $status;
}

/**
 * Return default pagecaching rule.
 */
function _authcache_default_pagecaching() {
  // By default restrict default cache roles to anonymous and authenticated
  // users.
  return array(
    array(
      'option' => 0,
      'pages' => AUTHCACHE_NOCACHE_DEFAULT,
      'noadmin' => 1,
      'roles' => array(
        'custom' => TRUE,
        'roles' => drupal_map_assoc(array(
          DRUPAL_ANONYMOUS_RID,
          DRUPAL_AUTHENTICATED_RID,
        )),
      ),
    ),
  );
}

/**
 * Utility function used to memoize the session_id in use during hook_init.
 */
function _authcache_original_session_id($set = FALSE) {
  $original_id = &drupal_static(__FUNCTION__);

  if ($set && isset($_COOKIE[session_name()])) {
    $original_id = session_id();
  }

  return $original_id;
}

/**
 * Utility function used to memoize the ob_level in use during hook_init.
 */
function _authcache_original_ob_level($set = FALSE) {
  $original_ob_level = &drupal_static(__FUNCTION__);

  if ($set) {
    $original_ob_level = ob_get_level();
  }

  return $original_ob_level;
}


/**
 * @} End of "defgroup authcache_helper"
 */

/**
 * @defgroup authcache_hooks Implementations of authcache hooks
 * @{
 */

/**
 * Implements hook_authcache_key_properties().
 */
function authcache_authcache_key_properties() {
  global $user, $base_url;

  // Remove "authenticated user"-role from the account roles except when it is
  // the only role on the account.
  $account_roles = $user->roles;
  if (array_keys($account_roles) != array(DRUPAL_AUTHENTICATED_RID)) {
    unset($account_roles[DRUPAL_AUTHENTICATED_RID]);
  }

  $roles = array_keys($account_roles);
  sort($roles);

  return array(
    'base_url' => $base_url,
    'roles' => $roles,
  );
}

/**
 * Implements hook_authcache_request_exclude().
 */
function authcache_authcache_request_exclude() {
  // The following four basic exclusion rules are mirrored in
  // authcacheinc_retrieve_cache_page() in authcache_builtin.cache.inc
  // BEGIN: basic exclusion rules.
  if (drupal_is_cli()) {
    return t('Running as CLI script');
  }

  if (!($_SERVER['REQUEST_METHOD'] == 'GET' || $_SERVER['REQUEST_METHOD'] == 'HEAD')) {
    return t('Only GET and HEAD requests allowed. Method for this request is: @method.',
      array('@method' => $_SERVER['REQUEST_METHOD']));
  }

  if (variable_get('cache') || variable_get('page_cache_without_database')) {
    return t('Drupal core page caching for anonymous users active.');
  }

  $frontscripts = variable_get('authcache_frontcontroller_whitelist',
    array(DRUPAL_ROOT . '/index.php'));
  $frontscripts = array_map('realpath', $frontscripts);
  if (!in_array(realpath($_SERVER['SCRIPT_FILENAME']), $frontscripts)) {
    return t('Not invoked using an allowed front controller.');
  }
  // END: basic exclusion rules.
  //
  if (variable_get('authcache_noajax', FALSE)
      && isset($_SERVER['HTTP_X_REQUESTED_WITH'])
      && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest'
    ) {
    return t('Ajax request');
  }

  $alias = drupal_get_path_alias($_GET['q']);

  // Now check page caching settings, defined by the site admin.
  $pagecaching = variable_get('authcache_pagecaching', _authcache_default_pagecaching());

  foreach ($pagecaching as $i => $page_rules) {
    $rule_num = $i + 1;
    // Do caching page roles apply to current user?
    if (authcache_role_restrict_access($page_rules['roles'])) {
      switch ($page_rules['option']) {
        case '0':
          // Cache every page except the listed pages.
        case '1':
          // Cache only the listed pages.
          $page_listed = drupal_match_path($alias, $page_rules['pages']);
          if (!(!($page_rules['option'] xor $page_listed))) {
            return t('Caching disabled by path list of page ruleset #@number', array('@number' => $rule_num));
          }
          break;

        case '2':
          // Cache pages for which the following PHP code returns TRUE.
          $result = 0;
          if (module_exists('php')) {
            $result = php_eval($page_rules['pages']);
          }
          if (empty($result)) {
            return t('Caching disabled by PHP rule of page ruleset #@number', array('@number' => $rule_num));
          }
          break;

        default:
          break;
      }

      if (!empty($page_rules['noadmin']) && path_is_admin(current_path())) {
        return t('Not caching admin pages (by page ruleset #@number)', array('@number' => $rule_num));
      }
    }
  }
}


/**
 * Implements hook_authcache_account_exclude().
 */
function authcache_authcache_account_exclude($account) {
  // Bail out from requests by superuser (uid=1)
  if ($account->uid == 1 && !variable_get('authcache_su', 0)) {
    return t('Caching disabled for superuser');
  }

  // Check for non-cacheable roles of the account.
  $extra_roles = authcache_diff_roles($account->roles, authcache_get_roles());
  if (!empty($extra_roles)) {
    return format_plural(count($extra_roles),
      'Account has non-cachable role @roles',
      'Account has non-cachable roles @roles',
      array('@roles' => implode(', ', $extra_roles)));
  }

  // Ensure that at least one pagecaching rule matches for this account.
  $no_rule_matches = TRUE;
  $pagecaching = variable_get('authcache_pagecaching', _authcache_default_pagecaching());
  foreach ($pagecaching as $page_rules) {
    // Do caching page roles apply to the given account?
    if (authcache_role_restrict_access($page_rules['roles'])) {
      $no_rule_matches = FALSE;
      break;
    }
  }

  if ($no_rule_matches) {
    return t('Account does not match any page caching rule.');
  }
}

/**
 * Implements hook_authcache_preclude().
 */
function authcache_authcache_preclude() {
  // Skip the cache on the next page request when messages are pending.
  if (drupal_set_message()) {
    return t('Pending messages');
  }
}

/**
 * Implements hook_authcache_cancel().
 */
function authcache_authcache_cancel() {
  // Check content-type.
  $content_type = _authcache_get_content_type();
  $allowed_mimetypes = preg_split('/(\r\n?|\n)/', variable_get('authcache_mimetype', AUTHCACHE_MIMETYPE_DEFAULT), -1, PREG_SPLIT_NO_EMPTY);
  if (!in_array($content_type['mimetype'], $allowed_mimetypes)) {
    return t('Only cache allowed HTTP content types (HTML, JS, etc)');
  }

  // Check http status.
  if (variable_get('authcache_http200', FALSE) && _authcache_get_http_status() != 200) {
    return t('HTTP status 404/403s/etc');
  }

  // Check headers already were sent.
  if (headers_sent() || ob_get_level() < _authcache_original_ob_level()) {
    return t('Private file transfers or headers were unexpectedly sent');
  }

  // Make sure "Location" redirect isn't used.
  foreach (headers_list() as $header) {
    if (strpos($header, 'Location:') === 0) {
      return t('Location header detected');
    }
  }

  // Don't cache pages with PHP errors (Drupal can't catch fatal errors).
  if (function_exists('error_get_last') && $error = error_get_last()) {
    switch ($error['type']) {
      case E_NOTICE:
      case E_USER_NOTICE:
      case E_DEPRECATED:
      case E_USER_DEPRECATED:
        // Ignore these errors.
        break;

      default:
        // Let user know there is PHP error and return.
        return t('PHP Error: @error', array('@error' => error_get_last()));
    }
  }
}

/**
 * Implements hook_authcache_cookie().
 */
function authcache_authcache_cookie($account) {
  // Add/Remove cookie for temporary exclusion.
  $cookies['nocache']['present'] = authcache_precluded();
  $cookies['nocache']['value'] = 1;

  return $cookies;
}

/**
 * Implements hook_authcache_key_ensure_present().
 */
function authcache_authcache_key_ensure_present($key, $lifetime, $current_session, $previous_session) {
  switch (variable_get('authcache_key_method', 'cache')) {
    case 'cache':
      if ($previous_session && $previous_session != $current_session) {
        cache_clear_all($previous_session, 'cache_authcache_key');
      }

      // Update cached key if necessary.
      $cache = cache_get($current_session, 'cache_authcache_key');
      if ($cache === FALSE || $cache->expire > 0 && $cache->expire < REQUEST_TIME || $cache->data != $key) {
        $expires = $lifetime ? REQUEST_TIME + $lifetime : CACHE_TEMPORARY;
        cache_set($current_session, $key, 'cache_authcache_key', $expires);
      }
      break;

    case 'cookie':
      authcache_add_cookie(array(
        'authcache' => array(
          'present' => TRUE,
          'httponly' => TRUE,
          'value' => $key,
          'lifetime' => $lifetime,
        ),
      ));
      break;
  }
}

/**
 * Implements hook_authcache_key_ensure_absent().
 */
function authcache_authcache_key_ensure_absent($current_session, $previous_session) {
  switch (variable_get('authcache_key_method', 'cache')) {
    case 'cache':
      if ($previous_session) {
        cache_clear_all($previous_session, 'cache_authcache_key');
      }
      break;

    case 'cookie':
      authcache_add_cookie(array(
        'authcache' => array(
          'present' => FALSE,
          'httponly' => TRUE,
        ),
      ));
      break;
  }
}

/**
 * @} End of "defgroup authcache_hooks"
 */


/**
 * @defgroup authcache_role_restrict Role configuration widget
 * @{
 * Reusable form API element for role restriction settings.
 */


/**
 * Implements hook_element_info().
 */
function authcache_element_info() {
  $types['authcache_role_restrict'] = array(
    '#input' => TRUE,
    '#tree' => TRUE,
    '#process' => array('authcache_process_role_restrict', 'form_process_container'),
    '#element_validate' => array('authcache_validate_role_restrict'),
    '#theme_wrappers' => array('container'),
    '#members_only' => FALSE,
  );
  return $types;
}

/**
 * Form API process callback for authcache_role_restrict element.
 */
function authcache_process_role_restrict($element, &$form_state) {
  $authcache_roles = authcache_get_roles();
  $allowed_roles = $authcache_roles;
  if (!empty($element['#members_only'])) {
    unset($allowed_roles[DRUPAL_ANONYMOUS_RID]);
  }

  $defaults = array(
    'custom' => FALSE,
    'roles' => $allowed_roles,
  );
  if (empty($element['#default_value'])) {
    $element['#default_value'] = $defaults;
  }
  else {
    $element['#default_value'] = $element['#default_value'] + $defaults;
  }

  if (empty($allowed_roles)) {
    $description = t('Currently there are no roles enabled for authcache. Fix this in <a href="!admin_link">authcache settings</a>.', array('!admin_link' => url('admin/config/system/authcache')));
  }
  else {
    $description = format_plural(count($allowed_roles),
    'The following role is currently enabled for authcache: %roles.',
    'The following roles are currently enabled for authcache: %roles.',
    array('%roles' => implode(', ', $allowed_roles)));
  };

  $custom_id = drupal_html_id($element['#id'] . '-custom');
  $element['custom'] = array(
    '#type' => 'checkbox',
    '#title' => t('Restrict allowed roles'),
    '#default_value' => $element['#default_value']['custom'],
    '#description' => $description,
    '#disabled' => empty($allowed_roles),
    '#id' => $custom_id,
  );
  $element['roles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Allowed roles'),
    '#options' => $allowed_roles,
    '#default_value' => array_keys($element['#default_value']['custom'] ? authcache_get_role_restrict_roles($element['#default_value']) : $allowed_roles),
    '#description' => t('Restrict to the selected roles.'),
    '#states' => array(
      'visible' => array(
        '#' . $custom_id => array('checked' => TRUE),
      ),
    ),
  );

  return $element;
}

/**
 * Validation callback for authcache_role_restrict element.
 */
function authcache_validate_role_restrict($element, &$form_state) {
  $value = $element['#value'];

  // Set value to NULL when custom role restrictions is not selected.
  if (empty($element['custom']['#value'])) {
    $value = NULL;
  }
  elseif (empty($value['roles'])) {
    $value['roles'] = array();
  }
  else {
    $value['roles'] = array_filter($value['roles']);
  }

  form_set_value($element, $value, $form_state);
}

/**
 * Return a list of allowed roles.
 *
 * Depending on the passed in configuration, either the authcache default roles
 * will be returned or the configured roles intersected with the default roles.
 *
 * @param array $config
 *   A role restrict configuration from an authcache_role_restrict widget.
 *
 * @return array
 *   A list of allowed roles (rid => role name)
 */
function authcache_get_role_restrict_roles($config) {
  $authcache_roles = authcache_get_roles();

  if (empty($config['custom'])) {
    $result = $authcache_roles;
  }
  elseif (empty($config['roles'])) {
    $result = array();
  }
  else {
    $result = array_intersect_key($authcache_roles, $config['roles']);
  }

  return $result;
}

/**
 * Check whether given account is allowed by configuration.
 */
function authcache_role_restrict_access($config, $account = NULL) {
  global $user;

  if (!$account) {
    $account = $user;
  }

  $allowed_roles = authcache_get_role_restrict_roles($config);
  $extra_roles = authcache_diff_roles($account->roles, $allowed_roles);
  return empty($extra_roles);
}

/**
 * Check whether given account is allowed by configuration (members only).
 */
function authcache_role_restrict_members_access($config, $account = NULL) {
  global $user;

  if (!$account) {
    $account = $user;
  }

  $allowed_roles = authcache_get_role_restrict_roles($config);
  unset($allowed_roles[DRUPAL_ANONYMOUS_RID]);
  $extra_roles = authcache_diff_roles($account->roles, $allowed_roles);
  return empty($extra_roles);
}

/**
 * @} End of "defgroup authcache_role_restrict"
 */
