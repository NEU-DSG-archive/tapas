<?php
/**
 * @file
 * Install, update and uninstall functions for the authcache module.
 */

/**
 * Implements hook_schema().
 */
function authcache_schema() {
  $schema['cache_authcache_key'] = drupal_get_schema_unprocessed('system', 'cache');
  $schema['cache_authcache_key']['description'] = 'Cache table for mapping sessions to authcache keys.';

  return $schema;
}

/**
 * Implements hook_enable().
 */
function authcache_enable() {
  // Is there any cache backend present?
  $modules = module_implements('authcache_cache_save');
  if (empty($modules)) {
    drupal_set_message(st('No cache backend module enabled. See <a href="@url">README.txt</a>.', array('@url' => base_path() . drupal_get_path('module', 'authcache') . '/README.txt')), 'error');
  }

  drupal_set_message(st('Authcache has been enabled. Please configure your caching settings under <a href="@url">Site Configuration -> Performance -> Authcache</a>.', array('@url' => base_path() . 'admin/config/system/authcache/config')), 'warning');
}

/**
 * Implements hook_disable().
 */
function authcache_disable() {

}

/**
 * Implements hook_requirements().
 */
function authcache_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break during installation.
  $t = get_t();

  // Check hook_authcache_cache_save implementation.
  $modules = module_implements('authcache_cache_save');
  if (empty($modules)) {
    $requirements['authcache'] = array(
      'value' => $t('No cache backend enabled'),
      'description' => $t('None of the enabled modules implements hook_authcache_cache_save(). This means that page caching will not have any effect. You should enable a module which implements this hook, e.g. authcache_builtin, authcache_varnish or authcache_boost.'),
      'severity' => REQUIREMENT_WARNING,
    );
  }
  else {
    $requirements['authcache'] = array(
      'value' => $t('hook_authcache_cache_save() implemented: @modules', array(
        '@modules' => implode(', ', $modules))),
      'severity' => REQUIREMENT_OK,
    );
  }
  $requirements['authcache']['title'] = $t('Authcache');

  $roles = variable_get('authcache_roles', array());
  if (count($roles) && (variable_get('cache') || variable_get('page_cache_without_database'))) {
    $message = '<p>' . $t('Drupal core page caching for anonymous users does not work properly when Authcache is enabled. Please either deactivate Drupal core page caching or disable Authcache.') . '</p>';
    if (!isset($roles[DRUPAL_ANONYMOUS_RID])) {
      $message .= '<p>' . $t('You may enable the page cache for anonymous users by <a href="!link">configuring</a> Authcache for anonymous users', array('!link' => url('admin/config/system/authcache'))) . '</p>';
    }
    if (variable_get('page_cache_without_database')) {
      $message .= '<p>' . $t('Furthermore it seems that !setting is enabled. Please remove that line from !file, otherwise Authcache will not work properly.', array('!setting' => '<code>$conf[\'page_cache_without_database\']</code>', '!file' => '<code>' . conf_path() . '/settings.php</code>')) . '</p>';
    }

    $requirements['authcache-vs-core-cache'] = array(
      'title' => $t('Authcache and Core Page Cache'),
      'value' => $t('Conflict with <a href="!link">Drupal core page caching</a>', array('!link' => url('admin/config/development/performance'))),
      'description' => $message,
      'severity' => ($phase == 'runtime' ? REQUIREMENT_ERROR : REQUIREMENT_WARNING),
    );
  }

  return $requirements;
}

/**
 * Implements hook_uninstall().
 */
function authcache_uninstall() {
  $variables = array(
    'authcache_frontcontroller_whitelist',
    'authcache_http200',
    'authcache_key_abbrev',
    'authcache_key_lifetime',
    'authcache_key_lifetime_select',
    'authcache_key_method',
    'authcache_mimetype',
    'authcache_noajax',
    'authcache_pagecaching',
    'authcache_roles',
    'authcache_su',
  );

  foreach ($variables as $variable) {
    variable_del($variable);
  }
}

/**
 * Remove authcache_post variable.
 */
function authcache_update_7003() {
  variable_del('authcache_post');
}

/**
 * Remove authcache_nojsroles variable.
 */
function authcache_update_7002() {
  variable_del('authcache_nojsroles');
}

/**
 * Install cache table for session-to-key mapping.
 */
function authcache_update_7001() {
  drupal_install_schema('authcache');
}

/**
 * Reset authcache module weight.
 */
function authcache_update_7000() {
  db_update('system')
  ->fields(array(
    'weight' => 0,
  ))
  ->condition('type', 'module')
  ->condition('name', 'authcache')
  ->execute();
}
