<?php
// $Id: regcode_voucher.module,v 1.1.4.7 2011/02/18 17:07:24 aidan Exp $


/**
 * Implements hook_menu().
 */
function regcode_voucher_menu() {

  $items = array();

  $items['admin/config/people/regcode/voucher'] = array(
    'title' => 'Voucher',
    'description' => 'Settings for using registration codes after registration',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('regcode_voucher_admin'),
    'access arguments' => array('administer registration codes'),
    'weight' => 20,
  );

  $items['user/%user/regcode'] = array(
    'title' => 'Voucher',
    'description' => 'Enter a voucher code',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('regcode_voucher'),
    'access callback' => '_regcode_voucher_accesscheck',
    'access arguments' => array(1, 'tab'),
    'weight' => 20,
  );

  return $items;
}


/**
 * Implements hook_form_FORM_ID_alter().
 *
 * This adds an extra formset to the user edit page which allows the user to
 * save a code when editing their profile page.
 */
function regcode_voucher_form_user_profile_form_alter(&$form, $form_state) {
  $account = $GLOBALS['user'];

  if (_regcode_voucher_accesscheck($account, 'editform')) {
    $form['regcode'] = array(
      '#type' => 'fieldset',
      '#title' => variable_get('regcode_voucher_fieldset_title', t('Registration Code')),
    );

    $form['regcode']['regcode_code'] = array(
      '#type' => 'textfield',
      '#title' => variable_get('regcode_voucher_field_title', t('Registration Code')),
      '#description' => variable_get('regcode_voucher_field_description', t('Please enter your registration code.')),
      '#required' => FALSE,
      '#element_validate' => array('regcode_code_element_validate'),
    );
  }
}


/**
 * Implements hook_user_update().
 */
function regcode_user_update(&$edit, $account, $category) {
  $code = regcode_use_helper($edit, $account);
  if (is_object($code)) {
    drupal_set_message(variable_get('regcode_voucher_message', 'Voucher code used successfully.'));
  }
}


/**
 * User code entry page
 */
function regcode_voucher() {
  $form = array();

  $form['regcode_introtext'] = array(
    '#type' => 'markup',
    '#value' => variable_get('regcode_voucher_introtext', ''),
  );

  $form['regcode_code'] = array(
    '#type' => 'textfield',
    '#title' => variable_get('regcode_voucher_field_title', t('Registration Code')),
    '#description' => variable_get('regcode_voucher_field_description', t('Please enter your registration code.')),
    '#required' => FALSE,
  );

  $form['regcode_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}


/**
 * Administration page
 */
function regcode_voucher_admin($form, &$form_state) {
  $form = array();

  $form['regcode_voucher_fieldset_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Field set title'),
    '#description' => t('The title of the voucher code fieldset'),
    '#default_value' => variable_get('regcode_voucher_fieldset_title', variable_get('regcode_fieldset_title', '')),
  );

  $form['regcode_voucher_field_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Field label'),
    '#description' => t('The label of the voucher code textfield.'),
    '#default_value' => variable_get('regcode_voucher_field_title', variable_get('regcode_field_title', '')),
  );

  $form['regcode_voucher_field_description'] = array(
    '#type' => 'textfield',
    '#title' => t('Field description'),
    '#description' => t('The description under the voucher code textfield.'),
    '#default_value' => variable_get('regcode_voucher_field_description', variable_get('regcode_field_description', '')),
  );

  $form['regcode_voucher_display'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Voucher form'),
    '#options' => array(
      'editform' => 'Display on user edit page',
      'tab' => 'Create tab in user profile',
    ),
    '#default_value' => variable_get('regcode_voucher_display', array()),
  );

  $form['regcode_voucher_introtext'] = array(
    '#type' => 'textarea',
    '#title' => t('Voucher page text'),
    '#description' => t('Text to be displayed on the voucher page'),
    '#default_value' => variable_get('regcode_voucher_introtext', ''),
  );

  $form['regcode_voucher_message'] = array(
    '#type' => 'textfield',
    '#title' => t('Voucher used message'),
    '#description' => t('Text to be displayed when the voucher was used successfully.'),
    '#default_value' => variable_get('regcode_voucher_message', t('Voucher code used successfully.')),
  );

  $form['regcode_voucher_allowed_roles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Allow these roles'),
    '#description' => t('Select roles which can enter registration codes post registration.'),
    '#options' => user_roles(),
    '#default_value' => variable_get('regcode_voucher_allowed_roles',   array()),
  );

  $form['regcode_voucher_disallowed_roles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Disallow these roles'),
    '#description' => t('Select roles which can not enter registration codes post registration.'),
    '#options' => user_roles(),
    '#default_value' => variable_get('regcode_voucher_disallowed_roles',   array()),
  );

  return system_settings_form($form);
}


/**
 * Submit handler
 */
function regcode_voucher_submit($form, $form_state) {
  $edit    = $form_state['values'];
  $account = $GLOBALS['user'];

  // We cannot simply call user_save here because any module that expects
  // the $edit variable to contain their form data will be disappointed.
  // This includes the simplenews, profile, and especially the role_expire
  // module which cause a notice error, a blank profile, and wiped out
  // user roles respectively.
  $code = regcode_use_helper($edit, $account);
  if (is_object($code)) {
    drupal_set_message(variable_get('regcode_voucher_message', t('Voucher code used successfully.')));
  }

  // Make use of $edit which has been changed by the hooks to see what roles need to be saved
  // Again, we can't call user_save($account, array('roles' => $edit['roles'])) because the
  // role_expire module deletes all of the roles because it's stupid.
  if (!empty($edit['roles'])) {
    foreach ($edit['roles'] as $rid => $role_name) {
      if ($rid > DRUPAL_AUTHENTICATED_RID) {
        $record = array('uid' => $account->uid, 'rid' => $rid);
        db_merge('users_roles')
          ->key($record)
          ->fields($record)
          ->execute();
      }
    }
  }

  drupal_goto('user');
}


/**
 * Validate handler
 */
function regcode_voucher_validate($form, $form_state) {
  $edit    = $form_state['values'];
  $account = $GLOBALS['user'];

  // Simulate a user profile validate
  if (module_exists('regcode_dynamic')) {
    regcode_dynamic_user('validate', $edit, $account, 'account');
  }

  $regcode_value = $form_state['values']['regcode_code'];
  if (!empty($regcode_value)) {
    $code = regcode_use($regcode_value);
    if (!is_object($code)) {
      form_error($form['regcode_code'], regcode_errormsg($code));
      watchdog('regcode', 'User entered invalid registration code (@code)',
            array('@code' => $regcode_value),
            WATCHDOG_WARNING);
    }
  }
}


/**
 * Check whether an account has access to the voucher system
 */
function _regcode_voucher_accesscheck($account, $context = '') {

  // Do not show for other users
  global $user;
  if ($account->uid != $user->uid) {
    return FALSE;
  }

  // Pages enabled
  $enabled    = array_filter(variable_get('regcode_voucher_display', array()));
  if (!in_array($context, $enabled)) {
    return FALSE;
  }

  // Role based access
  $allowed    = array_filter(variable_get('regcode_voucher_allowed_roles', array()));
  $disallowed = array_filter(variable_get('regcode_voucher_disallowed_roles', array()));

  $access = FALSE;

  foreach ($account->roles as $rid => $role) {
    if (isset($allowed[$rid])) {
      $access = TRUE;
    }
  }

  foreach ($account->roles as $rid => $role) {
    if (isset($disallowed[$rid])) {
      $access = FALSE;
    }
  }

  return $access;
}
