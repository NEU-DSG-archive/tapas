<?php
// $Id: regcode.module,v 1.4.2.25 2011/02/18 10:59:49 aidan Exp $

// Define validation error codes
define('REGCODE_VALIDITY_NOTEXISTING',   0);
define('REGCODE_VALIDITY_NOTAVAILABLE', 1);
define('REGCODE_VALIDITY_TAKEN',         2);
define('REGCODE_VALIDITY_EXPIRED',       3);

define('REGCODE_MODE_REPLACE', 0);
define('REGCODE_MODE_SKIP',     1);

define('REGCODE_CLEAN_TRUNCATE', 1);
define('REGCODE_CLEAN_INACTIVE', 3);
define('REGCODE_CLEAN_EXPIRED',   4);


/**
 * Implements hook_help().
 */
function regcode_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/config/people/regcode':
      $output  = '<p>' . t('View and manage created registration codes.') . '</p>';
      break;
    case 'admin/config/people/regcode/create':
      $output  = '<p>' . t('Create manually or generate new registration codes.') . '</p>';
      break;
    case 'admin/config/people/regcode/manage':
      $output  = '<p>' . t('Provides bulk management features for created registration codes.') . '</p>';
      break;
    case 'admin/config/people/regcode/settings':
      $output  = '<p>' . t('Configure the registration code module.') . '</p>';
      break;
  }
  return $output;
}


/**
 * Implements hook_permission().
 */
function regcode_permission() {
  return array(
    'administer registration codes' => array(
      'title' => t('administer registration codes'),
      'description' => t('Configure the module and generate and delete registration codes'),
    ),
  );
}


/**
 * Implements hook_menu().
 */
function regcode_menu() {

  $items = array();

  $items['admin/config/people/regcode'] = array(
    'title' => 'Registration codes',
    'description' => 'Manage registration codes.',
    'file' => 'regcode.admin.php',
    'page callback' => 'regcode_admin_list',
    'access arguments' => array('administer registration codes'),
  );

  $items['admin/config/people/regcode/list'] = array(
    'title' => 'List',
    'description' => 'List of registration codes',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 10,
  );

  $items['admin/config/people/regcode/create'] = array(
    'title' => 'Create',
    'description' => 'Create a registration code',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('regcode_admin_create'),
    'access arguments' => array('administer registration codes'),
    'file' => 'regcode.admin.php',
    'weight' => 20,
  );

  $items['admin/config/people/regcode/manage'] = array(
    'title' => 'Manage',
    'description' => 'Manage the registration code database',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('regcode_admin_manage'),
    'access arguments' => array('administer registration codes'),
    'file' => 'regcode.admin.php',
    'weight' => 30,
  );

  $items['admin/config/people/regcode/settings'] = array(
    'title' => 'Settings',
    'description' => 'Settings for registration code functionality.',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer registration codes'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('regcode_admin_settings'),
    'file' => 'regcode.admin.php',
    'weight' => 40,
  );

  return $items;
}


/**
 * Implements hook_entity_info().
 */
function regcode_entity_info() {
  return array(
    'regcode' => array(
      'label' => t('Registration Code'),
      'base table' => 'regcode',
      'entity keys' => array(
        'id' => 'rid',
        'label' => 'code',
      ),
    ),
  );
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function regcode_form_user_register_form_alter(&$form, &$form_state) {
  $code_optional = variable_get('regcode_optional', FALSE);
  $account = $form['#user'];

/*
  $form['regcode'] = array(
    '#type' => 'fieldset',
    '#title' => variable_get('regcode_fieldset_title', t('Registration Code')),
  );
*/

  $form['regcode']['regcode_code'] = array(
    '#type' => 'textfield',
    '#title' => variable_get('regcode_field_title', t('Registration Code')),
    '#description' => variable_get('regcode_field_description', t('Please enter your registration code.')),
    '#required' => !($code_optional || user_access('administer users')),
    '#element_validate' => array('regcode_code_element_validate'),
  );

  // Capture the code from the url and inject it into the registration form
  if (isset($_GET['regcode'])) {
    $form['regcode']['regcode_code']['#value']       = check_plain($_GET['regcode']);
    $form['regcode']['regcode_code']['#description'] = NULL;
    $form['regcode']['regcode_code']['#disabled']    = TRUE;
  }
}


/**
 * Validate the content of the code-field on user registration
 */
function regcode_code_element_validate(&$element, &$form_state) {
  if (!empty($element['#value'])) {
    $code = regcode_use($element['#value']);
    if (!is_object($code)) {
      form_error($element, regcode_errormsg($code));
      watchdog('regcode', 'User entered invalid registration code (@code)',
            array('@code' => $element['#value']),
            WATCHDOG_WARNING);
    }
  }
}

/**
 * Implements hook_user_insert().
 */
function regcode_user_insert(&$edit, $account, $category) {
  regcode_use_helper($edit, $account);
}


/**
 * Implements hook_views_api().
 */
function regcode_views_api() {
  return array('api' => 2.0);
}


/**
 * Implements hook_action_info().
 */
function regcode_action_info() {

  return array(
    'regcode_activate_action' => array(
      'type' => 'regcode',
      'label' => t('Activate codes'),
      'configurable' => FALSE,
      'triggers' => array('any' => TRUE),
    ),
    'regcode_deactivate_action' => array(
      'type' => 'regcode',
      'label' => t('Deactive codes'),
      'configurable' => FALSE,
      'triggers' => array('any' => TRUE),
    ),
    'regcode_delete_action' => array(
      'type' => 'regcode',
      'label' => t('Delete codes'),
      'configurable' => FALSE,
      'triggers' => array('any' => TRUE),
    ),
    'regcode_tag_action' => array(
      'type' => 'regcode',
      'label' => t('Tag codes'),
      'configurable' => TRUE,
      'triggers' => array('any' => TRUE),
    ),
  );
}


/**
 * Get the exposed regcode fields
 *
 * @return array List of fields and their descriptions
 */
function regcode_get_fields() {

  // Core exposed fields
  $fields = array(
    'begins' => array(
      'description' => t('When code should be active from'),
      'title' => t('Begins'),
    ),
    'expires' => array(
      'description' => t('When code should expire'),
      'title' => t('Expires'),
    ),
    'code' => array(
      'description' => t('The registration code'),
      'title' => t('Code'),
    ),
    'is_active' => array(
      'description' => t('Whether the code is active'),
      'title' => t('Enabled'),
    ),
    'maxuses' => array(
      'description' => t('Maximum times the code can be used'),
      'title' => t('Max'),
    ),
    'uses' => array(
      'description' => t('Number of times the code has been used'),
      'title' => t('Uses'),
    ),
  );

  // Load contributed fields
  $contrib = module_invoke_all('regcode_fields');
  if (is_array($contrib)) {
    $fields += $contrib;
  }

  return $fields;
}


/**
 * Regcode version of module_invoke().
 *
 * We can't use module_invoke because we want to pass the regcode by reference.
 * (Though we don't support PHP5
 */
function regcode_module_invoke(&$regcode) {
  foreach (module_implements('regcode_load') as $module) {
    $hook = $module . '_regcode_load';
    $hook($regcode);
  }
}


/**
 * Return text message requested by given identifier/constant
 *
 * @param $code The error message code
 * @return The text of the message.
 */
function regcode_errormsg($err) {
  $messages = array(
    REGCODE_VALIDITY_NOTEXISTING => t('Registration code does not exist'),
    REGCODE_VALIDITY_NOTAVAILABLE => t('Registration code is not available'),
    REGCODE_VALIDITY_TAKEN => t('Registration code has already been used'),
    REGCODE_VALIDITY_EXPIRED => t('Registration code has expired'),
  );

  $msg = FALSE;
  if (isset($messages[$err])) {
    $msg = $messages[$err];
  }

  return $msg;
}


/**
 * Load a registration code
 *
 * @param $code mixed
 *   Either the database primary key (rid), or an associative array containing
 *   the registration code.
 * @param object|bool The regcode object or FALSE if the code does not exist
 *
 * @example
 * regcode_load(1231); // Loads the regcode with rid=1231
 * regcode_load(array('code'=>'foobar')); // Loads the "foobar" regcode
 */
function regcode_load($code) {

  // Build the query
  $query = db_select('regcode')
    ->fields('regcode', array(
        'rid', 'uid', 'created', 'lastused', 'begins',
        'expires', 'code', 'is_active', 'maxuses', 'uses'))
    ->range(0, 1);

  // Allow mixed search parameters
  if (is_numeric($code)) {
    $query->condition('rid', $code);
  }
  elseif (is_array($code) && !empty($code['code'])) {
    $query->condition('code', $code['code']);
  }
  else {
    return FALSE;
  }

  // Run the query and grab the regcode
  $regcode = $query->execute()->fetchObject();
  if (!$regcode) {
    return FALSE;
  }

  // Load the terms
  $query = db_select('regcode_term')
    ->fields('term_data', array('tid', 'name'))
    ->condition('regcode_term.rid', $regcode->rid);
  $query->join('taxonomy_term_data', 'term_data', 'regcode_term.tid = term_data.tid');
  $tags = $query->execute();

  $regcode->tags = array();
  foreach ($tags as $tag) {
    $regcode->tags[$tag->tid] = $tag->name;
  }

  // Allow modules to add properties
  regcode_module_invoke($regcode);

  return $regcode;
}


/**
 * Validate the use of a code, or use the code and attribute it to a user and call the hooks.
 *
 * This is a helper function which wraps around the API call (regcode_use) to automate the following:
 * - Call the regcode_used hooks
 * - Notify the rules module
 * - Update the $edit variable for hook_user
 * -
 */
function regcode_use_helper(&$edit, &$account) {

  // If there's no code provided we have nothing to do
  if (empty($edit['regcode_code'])) {
    return;
  }

  // Use the code
  $code = regcode_use($edit['regcode_code'], $account->uid);
  watchdog('regcode', 'The registration code %code was used by !user',
    array('%code' => $edit['regcode_code'], '!user' => l($account->name, 'user/' . $account->uid)));

  // Trigger the regcode_used hook
  foreach (module_implements('regcode_used') as $module) {
    $hook = $module . '_regcode_used';
    $hook($edit, $account, $code);
  }

  // Notify rules module
  if (is_object($code) && module_exists('rules')) {
    rules_invoke_event('regcode_used', $account, $code);
  }

  // Update the edit variable (nothing to save here)
  $edit['regcode_code'] = NULL;

  return $code;
}


/**
 * Validate the use of a code, or use the code and attribute it to a user.
 *
 * This is a raw API method for low level usage. It does not call the regcode_used hook,
 * or interact with the user account or the rules module.
 *
 * See the regcode_use_helper function.
 *
 * @param $code string The registration code
 * @param $account_id Optional user id to assign the given code to
 * @return An error code, or TRUE if the code was assigned successfully.
 */
function regcode_use($regcode, $account_id = FALSE) {

  // Load the code
  $code = regcode_load(array('code' => trim($regcode)));

  // Check validity
  if ($code === FALSE) {
    return REGCODE_VALIDITY_NOTEXISTING;
  }
  if ($code->uses >= $code->maxuses && $code->maxuses !== '0') {
    return REGCODE_VALIDITY_TAKEN;
  }
  if (!$code->is_active) {
    return REGCODE_VALIDITY_NOTAVAILABLE;
  }
  if (!empty($code->begins) && $code->begins > REQUEST_TIME) {
    return REGCODE_VALIDITY_NOTAVAILABLE;
  }
  if (!empty($code->expires) && $code->expires < REQUEST_TIME) {
    return REGCODE_VALIDITY_EXPIRED;
  }

  // Use the code if an account has been provided
  if ($account_id) {

    // Mark the code inactive if it's used up
    $active = 1;
    if ($code->maxuses != 0 && $code->uses + 1 >= $code->maxuses) {
      $active = 0;
    }

    // Use the code
    db_update('regcode')
      ->fields(array(
          'uses' => $code->uses + 1,
          'lastused' => REQUEST_TIME,
          'uid' => $account_id,
          'is_active' => $active,
        ))
      ->condition('rid', $code->rid)
      ->execute();
  }

  return $code;
}


/**
 * Save given code array to a record in the db
 *
 * @todo Remove the $terms parameter and put it in the object
 * @param $code object A code object (required fields are code,
 * @param $terms array An array of terms to associate this tag with
 * @param $action int Action to perform when saving the code:
 * @return bool TRUE if the code was saved
 */
function regcode_save($code, $terms = array(), $action = REGCODE_MODE_REPLACE) {
  // Sanity check
  if (empty($code) || empty($code->code)) {
    return FALSE;
  }

  // Insert mode
  if ($action == REGCODE_MODE_REPLACE) {
    db_delete('regcode')
      ->condition('code', $code->code)
      ->execute();
  }

  // Insert
  $rid = db_insert('regcode')
    ->fields(array(
      'created'   => REQUEST_TIME,
      'begins'    => empty($code->begins) ? NULL : (int) $code->begins,
      'expires'   => empty($code->expires) ? NULL : (int) $code->expires,
      'code'      => check_plain($code->code),
      'is_active' => isset($code->is_active) ? $code->is_active : 1,
      'maxuses'   => isset($code->maxuses) ? (int) $code->maxuses : 1,
    ))
    ->execute();

  // Add tags
  if (count($terms)) {
    foreach (array_filter($terms) as $tid => $enabled) {
      db_insert('regcode_term')
        ->fields(array('rid' => $rid, 'tid' => $tid))
        ->execute();
    }
  }

  return $rid;
}


/**
 * Delete regcode codes
 *
 * @param $op int The action to perform
 */
function regcode_clean($op) {
  $res = FALSE;

  switch ($op) {
    case REGCODE_CLEAN_TRUNCATE:
      $res = db_query('TRUNCATE {regcode}');
      $res = db_query('TRUNCATE {regcode_term}');
      break;

    case REGCODE_CLEAN_EXPIRED:
      $res = db_delete('regcode')
        ->condition('expires', REQUEST_TIME, '<')
        ->execute();
      break;

    case REGCODE_CLEAN_INACTIVE:
      $res = db_delete('regcode')
        ->condition('is_active', 0)
        ->execute();
      break;
  }

  return $res;
}


/**
 * Generate a code
 */
function regcode_generate($length, $output, $case) {
  static $seeded = FALSE;

  // Possible seeds
  $outputs['alpha']    = 'abcdefghijklmnopqrstuvwqyz';
  $outputs['numeric']  = '0123456789';
  $outputs['alphanum'] = 'abcdefghijklmnopqrstuvwqyz0123456789';
  $outputs['hexadec']  = '0123456789abcdef';

  // Choose seed
  if (isset($outputs[$output])) {
    $output = $outputs[$output];
  }

  // Seed generator (only do this once per invocation)
  if (!$seeded) {
    list($usec, $sec) = explode(' ', microtime());
    $seed = (float) $sec + ((float) $usec * 100000);
    mt_srand($seed);
    $seeded = TRUE;
  }

  // Generate
  $str = '';
  $output_count = strlen($output);
  for ($i = 0; $length > $i; $i++) {
    $str .= $output{mt_rand(0, $output_count - 1)};
  }
  if ($case) {
    $str = strtoupper($str);
  }

  return $str;
}


/**
 * Regcode delete action.
 */
function regcode_delete_action(&$object, $context = array()) {
  db_delete('regcode')
    ->condition('rid', $object->rid)
    ->execute();
}


/**
 * Regcode activate action.
 */
function regcode_activate_action(&$object, $context = array()) {
  db_update('regcode')
    ->fields(array('is_active' => 1))
    ->condition('rid', $object->rid)
    ->execute();
}


/**
 * Regcode deactivate action.
 */
function regcode_deactivate_action(&$object, $context = array()) {
  db_update('regcode')
    ->fields(array('is_active' => 0))
    ->condition('rid', $object->rid)
    ->execute();
}


/**
 * Regcode tag action.
 */
function regcode_tag_action(&$object, $context = array()) {

  // Apply terms
  foreach ($context['apply_terms'] as $term) {
    $record = array('rid' => $object->rid, 'tid' => $term);
    db_merge('regcode_term')
      ->key($record)
      ->fields($record)
      ->execute();
  }

  // Remove terms
  foreach ($context['remove_terms'] as $term) {
    db_delete('regcode_term')
      ->condition('rid', $object->rid)
      ->condition('tid', $term)
      ->execute();
  }
}


/**
 * Form for tag_action
 */
function regcode_tag_action_form() {
  $form = array();

  $form['regcode_apply_terms'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Apply tags'),
    '#description' => t('Select tags to be applied to the selected codes.'),
    '#options' => regcode_get_vocab_terms(),
  );

  $form['regcode_remove_terms'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Remove tags'),
    '#description' => t('Select tags to be remove to the selected codes.'),
    '#options' => regcode_get_vocab_terms(),
  );

  $vid  = variable_get('regcode_vocabulary', 1);
  $text = t('You can <a href="!url">create tags</a> through the taxonomy module.',
    array('!url' => url('admin/structure/taxonomy/' . $vid . '/add/term')));
  $form['regcode_taxonomy'] = array(
    '#value' => '<p>' . $text . '</p>',
  );

  return $form;
}


/**
 * Submit handler for tag_action
 */
function regcode_tag_action_submit($form, $form_state) {
  return array(
    'apply_terms' => array_filter($form_state['values']['regcode_apply_terms']),
    'remove_terms' => array_filter($form_state['values']['regcode_remove_terms']),
  );
}


/**
 * Get a list of terms
 */
function regcode_get_vocab_terms() {
  $tree  = taxonomy_get_tree(variable_get('regcode_vocabulary', 1));
  $terms = array();
  foreach ($tree as $term) {
    $terms[$term->tid] = $term->name;
  }
  return $terms;
}


/**
 * Implements hook_token_info().
 */
function regcode_token_info() {
  $type = array(
    'name' => t('Registration Codes'),
    'description' => t('Replacement tokens for registration codes'),
    'needs-data' => 'regcode',
  );

  $regcode['created'] = array(
    'name' => t("Code creation time"),
    'description' => t("The date the regcode was created."),
    'type' => 'date',
  );

  $regcode['lastused'] = array(
    'name' => t("Code last used time"),
    'description' => t("The date the regcode was used last."),
    'type' => 'date',
  );

  $regcode['begins'] = array(
    'name' => t("Code activation date"),
    'description' => t("The date the regcode gets activated."),
    'type' => 'date',
  );

  $regcode['expires'] = array(
    'name' => t("Code expiry date"),
    'description' => t("The date the regcode expires."),
    'type' => 'date',
  );

  $regcode['code'] = array(
    'name' => t("Registration code"),
    'description' => t("One single registration code"),
  );

  $regcode['regurl'] = array(
    'name' => t("Registration URL"),
    'description' => t("Link to the registration page with regcode included"),
  );

  $regcode['is_active'] = array(
    'name' => t("State of the regcode"),
    'description' => t("Whether the code is active"),
  );

  $regcode['maxuses'] = array(
    'name' => t("Maximum usage count"),
    'description' => t("Maximum times a code can be used"),
  );

  $regcode['uses'] = array(
    'name' => t("Current usage count"),
    'description' => t("Number of times the code already has been used"),
  );

  return array(
    'types' => array('regcode' => $type),
    'tokens' => array('regcode' => $regcode),
  );
}

/**
 * Implements hook_tokens().
 */
function regcode_tokens($type, $tokens, array $data = array(), array $options = array()) {
  if (isset($options['language'])) {
    $language_code = $options['language']->language;
  }
  else {
    $language_code = NULL;
  }

  $replacements = array();

  if ($type == 'regcode' && !empty($data['regcode'])) {
    $regcode = $data['regcode'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'created':
          $replacements[$original] = format_date($regcode->created, 'medium', '', NULL, $language_code);
          break;

        case 'lastused':
          $replacements[$original] = format_date($regcode->created, 'medium', '', NULL, $language_code);
          break;

        case 'begins':
          $replacements[$original] = format_date($regcode->created, 'medium', '', NULL, $language_code);
          break;

        case 'expires':
          $replacements[$original] = format_date($regcode->created, 'medium', '', NULL, $language_code);
          break;

        case 'code':
          $replacements[$original] = $regcode->code;
          break;

        case 'regurl':
          $replacements[$original] = url('user/register', array(
            'query' => array('regcode' => $regcode->code),
            'absolute' => TRUE,
          ));
          break;

        case 'is_active':
          $replacements[$original] = $regcode->is_active ? t('active') : t('inactive');
          break;

        case 'maxuses':
          $replacements[$original] = $regcode->maxuses;
          break;

        case 'uses':
          $replacements[$original] = $regcode->uses;
          break;
      }
    }

    if ($created_tokens = token_find_with_prefix($tokens, 'created')) {
      $replacements += token_generate('date', $created_tokens, array('date' => $regcode->created), $options);
    }

    if ($lastused_tokens = token_find_with_prefix($tokens, 'lastused')) {
      $replacements += token_generate('date', $lastused_tokens, array('date' => $regcode->lastused), $options);
    }

    if ($begins_tokens = token_find_with_prefix($tokens, 'begins')) {
      $replacements += token_generate('date', $begins_tokens, array('date' => $regcode->begins), $options);
    }

    if ($expires_tokens = token_find_with_prefix($tokens, 'expires')) {
      $replacements += token_generate('date', $expires_tokens, array('date' => $regcode->expires), $options);
    }
  }

  return $replacements;
}
