<?php

/**
 * @file
 * Entityreference view widget module.
 */

/**
 * Implements hook_entity_info_alter().
 */
function entityreference_view_widget_entity_info_alter(&$info) {
  foreach ($info as $entity_type => $data) {
    $info[$entity_type]['view modes']['entityreference_view_widget'] = array(
      'label' => t('Entity Reference View Widget'),
      'custom settings' => TRUE,
    );
  }
}

/**
 * Implements hook_views_data_alter().
 */
function entityreference_view_widget_views_data_alter(&$data) {
  foreach (entity_get_info() as $info) {
    if (isset($info['base table']) && isset($data[$info['base table']]['table'])) {
      $data[$info['base table']]['entityreference_view_widget'] = array(
        'title' => $data[$info['base table']]['table']['group'],
        'group' => t('Entity Reference View Widget Checkbox'),
        'help' => t('Provide a checkbox to select the row for an entity reference.'),
        'real field' => $info['entity keys']['id'],
        'field' => array(
          'handler' => 'entityreference_view_widget_handler_field_checkbox',
          'click sortable' => FALSE,
        ),
      );
    }
  }
}

/**
 * Implements hook_menu().
 */
function entityreference_view_widget_menu() {
  $items['entityreference_view_widget/%ctools_js/modal/%/%/%'] = array(
    'title' => 'Entity reference view widget modal',
    'page callback' => 'entityreference_view_widget_modal',
    'page arguments' => array(1,3,4,5),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['entityreference_view_widget/ajax'] = array(
    'page callback' => 'entityreference_view_widget_ajax',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function entityreference_view_widget_theme() {
  return array(
    'entityreference_view_widget_widget' => array(
      'render element' => 'widget',
    ),
    'entityreference_view_widget_rows' => array(
      'render element' => 'rows',
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function entityreference_view_widget_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'entityreference_view_widget') . '/views',
  );
}

/**
 * Implements hook_field_widget_info().
 */
function entityreference_view_widget_field_widget_info() {
  $widgets['entityreference_view_widget'] = array(
    'label' => t('View'),
    'description' => t('An advanced, view-based widget.'),
    'field types' => array('entityreference'),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      'default value' => FIELD_BEHAVIOR_NONE,
    ),
  );

  return $widgets;
}

/**
 * Implements hook_field_widget_settings_form().
 */
function entityreference_view_widget_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $target_type = $field['settings']['target_type'];
  $info = entity_get_info($target_type);

  if ($widget['type'] == 'entityreference_view_widget') {
    // Get a list of all views that contain a "Entityreference View Widget" display.
    $options = array();
    $displays = views_get_applicable_views('entityreference view display');
    foreach ($displays as $data) {
      list($view, $display_id) = $data;
      $view_name = !empty($view->human_name) ? $view->human_name : $view->name;
      $options[$view->name . '|' . $display_id] = check_plain($view_name . ' | ' . $view->display_handler->display->display_title);
    }

    $element['view'] = array(
      '#type' => 'select',
      '#title' => t('View'),
      '#description' => t('Specify the View to use for selecting items. Only views that have an "Entityreference View Widget" display are shown.'),
      '#options' => $options,
      '#default_value' => isset($settings['view']) ? $settings['view'] : '',
      '#required' => TRUE,
    );
    $element['pass_argument'] = array(
      '#type' => 'checkbox',
      '#title' => t('Pass selected entity ids to View'),
      '#description' => t('If enabled, the View will get all selected entity ids as the first argument. Useful for excluding already selected items.'),
      '#default_value' => isset($settings['pass_argument']) ? $settings['pass_argument'] : '',
    );
  }

  return $element;
}

/**
 * Implements hook_field_widget_form().
 */
function entityreference_view_widget_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  ctools_include('ajax');
  ctools_include('modal');
  ctools_include('plugins');

  $frontend_id = str_replace('_', '-', $field['field_name']);
  $target_view = explode('|', $instance['widget']['settings']['view']);

  $form['#after_build'][] = 'entityreference_view_widget_add_resources';

  $settings = array(
    'langcode' => $langcode,
    'table_id' => $frontend_id . '-values',
    'target_type' => $field['settings']['target_type'],
    'cardinality' => $field['cardinality'],
  );

  $form[$field['field_name'] . '_settings'] = array(
    '#type' => 'hidden',
    '#default_value' => json_encode($settings),
    '#weight' => 100,
    '#attributes' => array(
      'id' => 'entityreference-view-widget-' . $frontend_id . '-settings',
    ),
  );

  $element['add_more'] = array(
    '#markup' => ctools_modal_text_button(t('Add items'), 'entityreference_view_widget/nojs/modal/' . $target_view[0] . '/' . $target_view[1] . '/' . $field['field_name'], '', 'button field-add-more-submit'),
    '#element_validate' => array('entityreference_view_widget_validate'),
    '#name' => $field['field_name'],
    '#field_label' => $instance['label'],
    '#required' => $instance['required'],
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'entityreference_view_widget') . '/entityreference_view_widget.css'),
    ),
  );
  $element['#theme'] = 'entityreference_view_widget_widget';
  $element['#field_name'] = $field['field_name'];
  $element['#cardinality'] = $field['cardinality'];

  foreach ($items as $delta => $item) {
    $element[$delta] = entityreference_view_widget_row($delta, $field['field_name'], $field['settings']['target_type'], $langcode, $item['target_id'], count($items));
  }

  return $element;
}

/**
 * Attach the required js and libraries for the widget.
 */
function entityreference_view_widget_add_resources($form, &$form_state) {
  ctools_include('ajax');
  ctools_include('modal');
  ctools_include('plugins');
  ctools_modal_add_js();
  drupal_add_js(drupal_get_path('module', 'entityreference_view_widget') . '/entityreference_view_widget.js');

  return $form;
}

/**
 * Pushes input values to form state.
 */
function entityreference_view_widget_validate($element, &$form_state, $form) {
  $field_name = $element['#name'];
  $langcode = $form[$field_name]['#language'];

  if (isset($form_state['input'][$field_name])) {
    foreach ($form_state['input'][$field_name][$langcode] as $delta => $value) {
      if (!empty($value['target_id'])) {
        $form[$field_name][$langcode][$delta] = entityreference_view_widget_row($delta, $field_name, $form_state['field'][$field_name][$langcode]['field']['settings']['target_type'], $langcode, $value['target_id'], count($form_state['input'][$field_name][$langcode]));
        $valid = 1;
      }
    }
    $form_state['values'][$field_name] = $form_state['input'][$field_name];
  }

  if ($element['#required'] && empty($valid)) {
    form_set_error($field_name, t('@f field is required!', array('@f' => $element['#field_label'])));
  }
}

/**
 * Callback for ctools modal window.
 *
 * @param string $mode
 *   Mode: js or nojs.
 * @param string $name
 *   Machine name of the target view.
 * @param string $display
 *   Display name of the target view.
 * @param string $field_name
 *   Machine name of the target field to edit.
 */
function entityreference_view_widget_modal($mode, $name, $display, $field_name) {
  ctools_include('modal');
  ctools_include('ajax');

  $view = views_get_view($name);
  $view->use_ajax = TRUE;
  $view->display['default']->display_options['use_ajax'] = TRUE;

  $html = $view->preview();

  $submit = array(
    '#type' => 'container',
    '#attributes' => array(
      'id' => 'entityreference-view-widget-modal-submit',
    ),
    'button_add' => array(
      '#type' => 'button',
      '#value' => t('Add selected items'),
      '#attributes' => array(
        'class' => array('button'),
      ),
    ),
    'button_add_close' => array(
      '#type' => 'button',
      '#value' => t('Add items and close window'),
      '#attributes' => array(
        'class' => array('button', 'modal-close'),
      ),
    ),
    'select_all' => array(
      '#markup' => l(t('Select all'), '', array('attributes' => array('id' => 'entityreference_view_widget_select_all'))),
    ),
    'field_name' => array(
      '#type' => 'hidden',
      '#name' => 'field_name',
      '#value' => $field_name,
      '#attributes' => array(
        'id' => 'entityreference-view-widget-field-name',
      ),
    ),
  );

  $html .= drupal_render($submit);

  return ctools_modal_render($view->human_name, $html);
}

/**
 * Ajax callback to transform selected entity IDs into table rows.
 */
function entityreference_view_widget_ajax() {
  $post = $_POST;

  foreach ($post['entity_ids'] as $entity_id) {
    $post['default_entity_ids'][] = $entity_id;
  }

  $entity_ids = array_unique($post['default_entity_ids']);

  $rows['#theme'] = 'entityreference_view_widget_rows';
  $rows['#cardinality'] = $post['cardinality'];

  foreach ($entity_ids as $delta => $entity_id) {
    $rows[$delta] = entityreference_view_widget_row($delta, $post['field_name'], $post['target_type'], $post['langcode'], $entity_id, count($entity_ids));
  }

  if (!empty($post['entity_ids'])) {
    print render($rows);
  }
}

/**
 * Returns a render array for a single field value.
 */
function entityreference_view_widget_row($delta, $field_name, $target_type, $langcode, $target_id, $max_delta) {
  $frontend_id = 'edit-' . str_replace('_', '-', $field_name) . '-' . $langcode . '-' . $delta;
  $entities = entity_load($target_type, array($target_id));
  $label = entity_label($target_type, current($entities));
  $name = $field_name . '[' . $langcode . '][' . $delta . ']';

  $row = array(
    'target_id' => array(
      '#type' => 'checkbox',
      '#delta' => $delta,
      '#field_suffix' => '<label class="option" for="' . $frontend_id . '">' . $label . '</label>',
      '#return_value' => $target_id,
      '#value' => $target_id,
      '#title_display' => 'after',
      '#name' => $name . '[target_id]',
      '#attributes' => array(
        'checked' => 'checked',
        'id' => $frontend_id,
        'data-delta' => $delta,
      ),
    ),
    '_weight' => array(
      '#type' => 'select',
      '#options' => entityreference_view_widget_weights($max_delta),
      '#title' => t('Weight'),
      '#value' => $delta,
      '#title_display' => 'invisible',
      '#name' => $name . '[_weight]',
      '#attributes' => array(
        'id' => $frontend_id . '-weight',
        'class' => array($field_name . '-delta-order'),
      ),
    ),
  );

  return $row;
}

/**
 * Generate weight select list values depending on the amount of field values.
 *
 * @param int $max_delta
 *
 * @return array
 */
function entityreference_view_widget_weights($max_delta) {
  $weights = array();

  for ($i = 0; $i <= $max_delta; $i++) {
    $weights[$i] = $i;
    if ($i) {
      $weights[-$i] = -$i;
    }
  }

  ksort($weights);

  return $weights;
}

/**
 * Theme function for the whole widget.
 */
function theme_entityreference_view_widget_widget($variables) {
  $widget = $variables['widget'];
  $output = '';
  $table_id = drupal_html_id($widget['#field_name'] . '_values');
  $order_class = $widget['#field_name'] . '-delta-order';
  $required = !empty($widget['#required']) ? theme('form_required_marker', $variables) : '';

  $header = array(
    array(
      'data' => '<label>' . t('!title !required', array('!title' => $widget['#title'], '!required' => $required)) . "</label>",
      'colspan' => 2,
      'class' => array('field-label'),
    ),
  );
  if ($widget['#cardinality'] !== '1') {
    $header[] = array(
      'data' => t('Order'),
      'class' => array('tabledrag-hide'),
    );
  }
  $rows = array();

  // Sort items according to '_weight' (needed when the form comes back after
  // preview or failed validation)
  $items = array();
  foreach (element_children($widget) as $key) {
    if ($key === 'add_more') {
      $add_more_button = &$widget[$key];
    }
    else {
      $items[] = &$widget[$key];
    }
  }
  usort($items, '_field_sort_items_value_helper');

  // Add the items as table rows.
  foreach ($items as $key => $item) {
    $item['_weight']['#attributes']['class'] = array($order_class);
    $delta_element = drupal_render($item['_weight']);
    $cells = array(
      array('data' => '', 'class' => array('field-multiple-drag')),
      drupal_render($item),
    );
    if ($widget['#cardinality'] !== '1') {
      $cells[] = array('data' => $delta_element, 'class' => array('delta-order'));
    }
    $rows[] = array(
      'data' => $cells,
      'class' => array('draggable'),
    );
  }

  if (empty($rows)) {
    $rows[][] = array(
      'data' => t('No items had been added yet. Click "Add items" to launch the widget.'),
      'colspan' => '3',
    );
  }

  $output = '<div class="form-item">';
  $output .= theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array(
      'id' => $table_id,
      'class' => array('field-multiple-table')
    ),
  ));
  $output .= $widget['#description'] ? '<div class="description">' . $widget['#description'] . '</div>' : '';
  $output .= '<div class="clearfix">' . drupal_render($add_more_button) . '</div>';
  $output .= '</div>';

  if ($widget['#cardinality'] !== '1') {
    drupal_add_tabledrag($table_id, 'order', 'sibling', $order_class);
  }

  return $output;
}

/**
 * Theme function for a selection of table rows.
 */
function theme_entityreference_view_widget_rows($variables) {
  $zebra = array('even' => 'odd');

  foreach (element_children($variables['rows']) as $row) {
    $output[$row]  = '<tr class="draggable ' . current($zebra) . '">';
    $output[$row] .= '<td class="field-multiple-drag"></td>';
    $output[$row] .= '<td>' . render($variables['rows'][$row]['target_id']) . '</td>';
    if ($variables['rows']['#cardinality'] !== '1') {
      $output[$row] .= '<td class="delta-order tabledrag-hide">' . render($variables['rows'][$row]['_weight']) . '</td>';
    }
    $output[$row] .= '</tr>';

    $zebra = array_flip($zebra);
  }

  return implode("\n", $output);
}
